[
  {
    "function_name": "_coerce_non_negative_float",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 110,
        "context": "\ndef _coerce_non_negative_float(value: Any, default: float = 0.0) -> float:\n    try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 252,
        "context": "    exists = os.path.isfile(path)\n    hold = _coerce_non_negative_float(\n        (item or {}).get(\"entry_hold_sec\"), default=0.0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 110,
        "context": "\ndef _coerce_non_negative_float(value: Any, default: float = 0.0) -> float:\n    try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 252,
        "context": "    exists = os.path.isfile(path)\n    hold = _coerce_non_negative_float(\n        (item or {}).get(\"entry_hold_sec\"), default=0.0"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_resolve_entry_video_path",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 122,
        "context": "\ndef _resolve_entry_video_path(item: Dict[str, Any] | None = None) -> str:\n    if item:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 240,
        "context": "def _prepare_entry_context(item: Dict[str, Any] | None = None) -> Dict[str, Any]:\n    path = _resolve_entry_video_path(item)\n    enabled = _is_entry_enabled(item)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 122,
        "context": "\ndef _resolve_entry_video_path(item: Dict[str, Any] | None = None) -> str:\n    if item:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 240,
        "context": "def _prepare_entry_context(item: Dict[str, Any] | None = None) -> Dict[str, Any]:\n    path = _resolve_entry_video_path(item)\n    enabled = _is_entry_enabled(item)"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_is_entry_enabled",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 133,
        "context": "\ndef _is_entry_enabled(item: Dict[str, Any] | None = None) -> bool:\n    if not item:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 241,
        "context": "    path = _resolve_entry_video_path(item)\n    enabled = _is_entry_enabled(item)\n    if not enabled:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 133,
        "context": "\ndef _is_entry_enabled(item: Dict[str, Any] | None = None) -> bool:\n    if not item:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 241,
        "context": "    path = _resolve_entry_video_path(item)\n    enabled = _is_entry_enabled(item)\n    if not enabled:"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_resolve_ending_video_path",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 143,
        "context": "\ndef _resolve_ending_video_path(item: Dict[str, Any] | None = None) -> str:\n    if item:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 268,
        "context": "def _prepare_ending_context(item: Dict[str, Any] | None = None) -> Dict[str, Any]:\n    path = _resolve_ending_video_path(item)\n    enabled = _is_ending_enabled(item)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 143,
        "context": "\ndef _resolve_ending_video_path(item: Dict[str, Any] | None = None) -> str:\n    if item:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 268,
        "context": "def _prepare_ending_context(item: Dict[str, Any] | None = None) -> Dict[str, Any]:\n    path = _resolve_ending_video_path(item)\n    enabled = _is_ending_enabled(item)"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_is_ending_enabled",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 154,
        "context": "\ndef _is_ending_enabled(item: Dict[str, Any] | None = None) -> bool:\n    if not item:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 269,
        "context": "    path = _resolve_ending_video_path(item)\n    enabled = _is_ending_enabled(item)\n    if not enabled:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 154,
        "context": "\ndef _is_ending_enabled(item: Dict[str, Any] | None = None) -> bool:\n    if not item:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 269,
        "context": "    path = _resolve_ending_video_path(item)\n    enabled = _is_ending_enabled(item)\n    if not enabled:"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_probe_media_duration",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 167,
        "context": "\ndef _probe_media_duration(path: str) -> Optional[float]:\n    \"\"\"Best-effort probe for a media file duration in seconds.\"\"\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 255,
        "context": "    )\n    duration = _probe_media_duration(path) if exists else None\n    total_lead = (duration or 0.0) + hold"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 279,
        "context": "    exists = os.path.isfile(path)\n    duration = _probe_media_duration(path) if exists else None\n    total_tail = float(duration or 0.0) if duration else 0.0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 167,
        "context": "\ndef _probe_media_duration(path: str) -> Optional[float]:\n    \"\"\"Best-effort probe for a media file duration in seconds.\"\"\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 255,
        "context": "    )\n    duration = _probe_media_duration(path) if exists else None\n    total_lead = (duration or 0.0) + hold"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 279,
        "context": "    exists = os.path.isfile(path)\n    duration = _probe_media_duration(path) if exists else None\n    total_tail = float(duration or 0.0) if duration else 0.0"
      }
    ],
    "call_count": 6,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_prepare_entry_context",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 239,
        "context": "\ndef _prepare_entry_context(item: Dict[str, Any] | None = None) -> Dict[str, Any]:\n    path = _resolve_entry_video_path(item)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1572,
        "context": "\n    entry_ctx = _prepare_entry_context(item)\n    entry_offset = float(entry_ctx.get(\"total_lead_sec\", 0.0))"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2017,
        "context": "\n    entry_ctx = _prepare_entry_context(item)\n    entry_offset = float(entry_ctx.get(\"total_lead_sec\", 0.0))"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 239,
        "context": "\ndef _prepare_entry_context(item: Dict[str, Any] | None = None) -> Dict[str, Any]:\n    path = _resolve_entry_video_path(item)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1572,
        "context": "\n    entry_ctx = _prepare_entry_context(item)\n    entry_offset = float(entry_ctx.get(\"total_lead_sec\", 0.0))"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2017,
        "context": "\n    entry_ctx = _prepare_entry_context(item)\n    entry_offset = float(entry_ctx.get(\"total_lead_sec\", 0.0))"
      }
    ],
    "call_count": 6,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_prepare_ending_context",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 267,
        "context": "\ndef _prepare_ending_context(item: Dict[str, Any] | None = None) -> Dict[str, Any]:\n    path = _resolve_ending_video_path(item)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1579,
        "context": "\n    ending_ctx = _prepare_ending_context(item)\n    ending_duration_runtime = float(ending_ctx.get("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2024,
        "context": "\n    ending_ctx = _prepare_ending_context(item)\n    ending_duration_runtime = float(ending_ctx.get("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 267,
        "context": "\ndef _prepare_ending_context(item: Dict[str, Any] | None = None) -> Dict[str, Any]:\n    path = _resolve_ending_video_path(item)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1579,
        "context": "\n    ending_ctx = _prepare_ending_context(item)\n    ending_duration_runtime = float(ending_ctx.get("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2024,
        "context": "\n    ending_ctx = _prepare_ending_context(item)\n    ending_duration_runtime = float(ending_ctx.get("
      }
    ],
    "call_count": 6,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_resolve_letter_asset_dir",
    "category": "production",
    "references": [
      {
        "filepath": "scripts/render_letter_previews.py",
        "line_number": 26,
        "context": "        因此需要在專案的虛擬環境中安裝相依（例如 Pillow）並能匯入 `spellvid`。\n    - 若要快速知道預設資產位置，腳本會以 `utils._resolve_letter_asset_dir(None)` 的回傳為預設。\n    - 預覽圖會畫出一個代表計算後字母 bounding box 的藍色框（半透明）。"
      },
      {
        "filepath": "scripts/render_letter_previews.py",
        "line_number": 165,
        "context": "def main() -> None:\n    default_asset_dir = Path(utils._resolve_letter_asset_dir(None)).resolve()\n    parser = argparse.ArgumentParser(description=\"產生字母影像預覽，檢查字母佈局是否符合預期。\")"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 290,
        "context": "\ndef _resolve_letter_asset_dir(item: Dict[str, Any] | None = None) -> str:\n    override = None"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 475,
        "context": "    letters_text = str(item.get(\"letters\", \"\") or \"\")\n    asset_dir = _resolve_letter_asset_dir(item)\n    mode = \"image\" if _coerce_bool("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1449,
        "context": "            \"missing_names\": [],\n            \"asset_dir\": _resolve_letter_asset_dir(item),\n            \"has_letters\": bool(str(item.get(\"letters\", \"\")).strip()),"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 290,
        "context": "\ndef _resolve_letter_asset_dir(item: Dict[str, Any] | None = None) -> str:\n    override = None"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 475,
        "context": "    letters_text = str(item.get(\"letters\", \"\") or \"\")\n    asset_dir = _resolve_letter_asset_dir(item)\n    mode = \"image\" if _coerce_bool("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1449,
        "context": "            \"missing_names\": [],\n            \"asset_dir\": _resolve_letter_asset_dir(item),\n            \"has_letters\": bool(str(item.get(\"letters\", \"\")).strip()),"
      }
    ],
    "call_count": 8,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_normalize_letters_sequence",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 305,
        "context": "\ndef _normalize_letters_sequence(letters: str) -> List[str]:\n    if not letters:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 328,
        "context": "def _plan_letter_images(letters: str, asset_dir: str) -> Dict[str, Any]:\n    seq = _normalize_letters_sequence(letters)\n    missing: List[Dict[str, Any]] = []"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 305,
        "context": "\ndef _normalize_letters_sequence(letters: str) -> List[str]:\n    if not letters:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 328,
        "context": "def _plan_letter_images(letters: str, asset_dir: str) -> Dict[str, Any]:\n    seq = _normalize_letters_sequence(letters)\n    missing: List[Dict[str, Any]] = []"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_letter_asset_filename",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 316,
        "context": "\ndef _letter_asset_filename(ch: str) -> Optional[str]:\n    if not ch:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 335,
        "context": "    for ch in seq:\n        fname = _letter_asset_filename(ch)\n        if not fname:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 316,
        "context": "\ndef _letter_asset_filename(ch: str) -> Optional[str]:\n    if not ch:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 335,
        "context": "    for ch in seq:\n        fname = _letter_asset_filename(ch)\n        if not fname:"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_plan_letter_images",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 327,
        "context": "\ndef _plan_letter_images(letters: str, asset_dir: str) -> Dict[str, Any]:\n    seq = _normalize_letters_sequence(letters)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 482,
        "context": "    if has_letters and mode == \"image\":\n        layout = _plan_letter_images(letters_text, asset_dir)\n        missing = layout.get(\"missing\", [])"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 327,
        "context": "\ndef _plan_letter_images(letters: str, asset_dir: str) -> Dict[str, Any]:\n    seq = _normalize_letters_sequence(letters)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 482,
        "context": "    if has_letters and mode == \"image\":\n        layout = _plan_letter_images(letters_text, asset_dir)\n        missing = layout.get(\"missing\", [])"
      },
      {
        "filepath": "tests/test_letters_images.py",
        "line_number": 27,
        "context": "\n    plan = utils._plan_letter_images(item[\"letters\"], str(letter_assets_dir))\n    filenames = [entry[\"filename\"] for entry in plan[\"letters\"]]"
      }
    ],
    "call_count": 5,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_letters_missing_names",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 462,
        "context": "\ndef _letters_missing_names(missing: List[Dict[str, Any]]) -> List[str]:\n    names: List[str] = []"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 485,
        "context": "    filenames = [entry.get(\"filename\") for entry in layout.get(\"letters\", [])]\n    missing_names = _letters_missing_names(missing)\n    return {"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 462,
        "context": "\ndef _letters_missing_names(missing: List[Dict[str, Any]]) -> List[str]:\n    names: List[str] = []"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 485,
        "context": "    filenames = [entry.get(\"filename\") for entry in layout.get(\"letters\", [])]\n    missing_names = _letters_missing_names(missing)\n    return {"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_prepare_letters_context",
    "category": "production",
    "references": [
      {
        "filepath": "scripts/render_letter_previews.py",
        "line_number": 24,
        "context": "注意事項：\n    - 此腳本會呼叫 `spellvid.utils._prepare_letters_context` 來取得字母佈局資訊，\n        因此需要在專案的虛擬環境中安裝相依（例如 Pillow）並能匯入 `spellvid`。"
      },
      {
        "filepath": "scripts/render_letter_previews.py",
        "line_number": 83,
        "context": "def load_layout(letters: str, asset_dir: Path) -> dict:\n    ctx = utils._prepare_letters_context({\n        \"letters\": letters,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 473,
        "context": "\ndef _prepare_letters_context(item: Dict[str, Any]) -> Dict[str, Any]:\n    letters_text = str(item.get(\"letters\", \"\") or \"\")"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1105,
        "context": "\n    letters_ctx = _prepare_letters_context(item)\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1443,
        "context": "    try:\n        letters_ctx = _prepare_letters_context(item)\n    except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1550,
        "context": "\n    letters_ctx = _prepare_letters_context(item)\n    letters_mode = letters_ctx.get(\"mode\")"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2125,
        "context": "\n    letters_ctx = _prepare_letters_context(item)\n    letters_mode = letters_ctx.get(\"mode\")"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 473,
        "context": "\ndef _prepare_letters_context(item: Dict[str, Any]) -> Dict[str, Any]:\n    letters_text = str(item.get(\"letters\", \"\") or \"\")"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1105,
        "context": "\n    letters_ctx = _prepare_letters_context(item)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1443,
        "context": "    try:\n        letters_ctx = _prepare_letters_context(item)\n    except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1550,
        "context": "\n    letters_ctx = _prepare_letters_context(item)\n    letters_mode = letters_ctx.get(\"mode\")"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2125,
        "context": "\n    letters_ctx = _prepare_letters_context(item)\n    letters_mode = letters_ctx.get(\"mode\")"
      }
    ],
    "call_count": 12,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_log_missing_letter_assets",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 498,
        "context": "\ndef _log_missing_letter_assets(missing: List[Dict[str, Any]]) -> None:\n    if not missing:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1570,
        "context": "    if letters_mode == \"image\" and letters_missing_details:\n        _log_missing_letter_assets(letters_missing_details)\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2144,
        "context": "    if letters_mode == \"image\" and letters_missing_details:\n        _log_missing_letter_assets(letters_missing_details)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 498,
        "context": "\ndef _log_missing_letter_assets(missing: List[Dict[str, Any]]) -> None:\n    if not missing:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1570,
        "context": "    if letters_mode == \"image\" and letters_missing_details:\n        _log_missing_letter_assets(letters_missing_details)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2144,
        "context": "    if letters_mode == \"image\" and letters_missing_details:\n        _log_missing_letter_assets(letters_missing_details)\n"
      }
    ],
    "call_count": 6,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_coerce_bool",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 137,
        "context": "    if \"entry_enabled\" in item:\n        return _coerce_bool(item.get(\"entry_enabled\"), True)\n    if \"entry_disabled\" in item:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 139,
        "context": "    if \"entry_disabled\" in item:\n        return not _coerce_bool(item.get(\"entry_disabled\"), False)\n    return True"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 158,
        "context": "    if \"ending_enabled\" in item:\n        return _coerce_bool(item.get(\"ending_enabled\"), True)\n    if \"ending_disabled\" in item:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 160,
        "context": "    if \"ending_disabled\" in item:\n        return not _coerce_bool(item.get(\"ending_disabled\"), False)\n    return True"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 476,
        "context": "    asset_dir = _resolve_letter_asset_dir(item)\n    mode = \"image\" if _coerce_bool(\n        item.get(\"letters_as_image\", True)) else \"text\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 512,
        "context": "\ndef _coerce_bool(value: Any, default: bool = True) -> bool:\n    \"\"\"Return a boolean, accepting common string/int representations.\"\"\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1250,
        "context": "        boxes[\"zh\"] = {\"x\": pos_x, \"y\": 64, \"w\": img_w, \"h\": img_h}\n    timer_visible = _coerce_bool(item.get(\"timer_visible\", True))\n    timer_font_size = 64"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1621,
        "context": "\n    timer_visible = _coerce_bool(item.get(\"timer_visible\", True))\n    timer_plan: List[Dict[str, Any]] = []"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2077,
        "context": "\n    timer_visible = _coerce_bool(item.get(\"timer_visible\", True))\n    timer_plan: List[Dict[str, Any]] = []"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 137,
        "context": "    if \"entry_enabled\" in item:\n        return _coerce_bool(item.get(\"entry_enabled\"), True)\n    if \"entry_disabled\" in item:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 139,
        "context": "    if \"entry_disabled\" in item:\n        return not _coerce_bool(item.get(\"entry_disabled\"), False)\n    return True"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 158,
        "context": "    if \"ending_enabled\" in item:\n        return _coerce_bool(item.get(\"ending_enabled\"), True)\n    if \"ending_disabled\" in item:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 160,
        "context": "    if \"ending_disabled\" in item:\n        return not _coerce_bool(item.get(\"ending_disabled\"), False)\n    return True"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 476,
        "context": "    asset_dir = _resolve_letter_asset_dir(item)\n    mode = \"image\" if _coerce_bool(\n        item.get(\"letters_as_image\", True)) else \"text\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 512,
        "context": "\ndef _coerce_bool(value: Any, default: bool = True) -> bool:\n    \"\"\"Return a boolean, accepting common string/int representations.\"\"\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1250,
        "context": "        boxes[\"zh\"] = {\"x\": pos_x, \"y\": 64, \"w\": img_w, \"h\": img_h}\n    timer_visible = _coerce_bool(item.get(\"timer_visible\", True))\n    timer_font_size = 64"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1621,
        "context": "\n    timer_visible = _coerce_bool(item.get(\"timer_visible\", True))\n    timer_plan: List[Dict[str, Any]] = []"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2077,
        "context": "\n    timer_visible = _coerce_bool(item.get(\"timer_visible\", True))\n    timer_plan: List[Dict[str, Any]] = []"
      }
    ],
    "call_count": 18,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_progress_bar_band_layout",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 531,
        "context": "\ndef _progress_bar_band_layout(bar_width: int) -> List[Dict[str, Any]]:\n    \"\"\"Return color bands with absolute pixel spans for the progress bar.\"\"\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 567,
        "context": "    color = _np.zeros((height, bar_width, 3), dtype=_np.uint8)\n    layout = _progress_bar_band_layout(bar_width)\n    for band in layout:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 634,
        "context": "\n    layout = _progress_bar_band_layout(bar_width)\n    step_count = max(1, int(_math_local.ceil(countdown * float(fps))))"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 531,
        "context": "\ndef _progress_bar_band_layout(bar_width: int) -> List[Dict[str, Any]]:\n    \"\"\"Return color bands with absolute pixel spans for the progress bar.\"\"\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 567,
        "context": "    color = _np.zeros((height, bar_width, 3), dtype=_np.uint8)\n    layout = _progress_bar_band_layout(bar_width)\n    for band in layout:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 634,
        "context": "\n    layout = _progress_bar_band_layout(bar_width)\n    step_count = max(1, int(_math_local.ceil(countdown * float(fps))))"
      }
    ],
    "call_count": 6,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_progress_bar_base_arrays",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 560,
        "context": "\ndef _progress_bar_base_arrays(bar_width: int) -> Tuple[_np.ndarray, _np.ndarray]:\n    \"\"\"Return (color_rgb, alpha_mask) arrays for the segmented progress bar.\"\"\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3093,
        "context": "        try:\n            base_color, base_mask = _progress_bar_base_arrays(\n                PROGRESS_BAR_WIDTH)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 560,
        "context": "\ndef _progress_bar_base_arrays(bar_width: int) -> Tuple[_np.ndarray, _np.ndarray]:\n    \"\"\"Return (color_rgb, alpha_mask) arrays for the segmented progress bar.\"\"\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3093,
        "context": "        try:\n            base_color, base_mask = _progress_bar_base_arrays(\n                PROGRESS_BAR_WIDTH)"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_make_progress_bar_mask",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 588,
        "context": "\ndef _make_progress_bar_mask(mask_slice: _np.ndarray, duration: float):\n    \"\"\"Create a MoviePy ImageClip mask from an alpha slice.\"\"\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3126,
        "context": "            try:\n                mask_clip = _make_progress_bar_mask(mask_slice, seg_duration)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 588,
        "context": "\ndef _make_progress_bar_mask(mask_slice: _np.ndarray, duration: float):\n    \"\"\"Create a MoviePy ImageClip mask from an alpha slice.\"\"\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3126,
        "context": "            try:\n                mask_clip = _make_progress_bar_mask(mask_slice, seg_duration)\n            except Exception:"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_build_progress_bar_segments",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 608,
        "context": "\ndef _build_progress_bar_segments(\n    countdown: float,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1597,
        "context": "    if progress_enabled:\n        progress_segments = _build_progress_bar_segments(\n            countdown, main_duration)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2053,
        "context": "    if progress_enabled:\n        progress_segments = _build_progress_bar_segments(\n            countdown, main_duration)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 608,
        "context": "\ndef _build_progress_bar_segments(\n    countdown: float,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1597,
        "context": "    if progress_enabled:\n        progress_segments = _build_progress_bar_segments(\n            countdown, main_duration)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2053,
        "context": "    if progress_enabled:\n        progress_segments = _build_progress_bar_segments(\n            countdown, main_duration)"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 63,
        "context": "def test_progress_bar_segments_default_countdown():\n    segments = utils._build_progress_bar_segments(\n        countdown=10,"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 103,
        "context": "def test_progress_bar_segment_disappearance_order_and_radius():\n    segments = utils._build_progress_bar_segments(\n        countdown=10,"
      }
    ],
    "call_count": 8,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_find_and_set_ffmpeg",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 696,
        "context": "\ndef _find_and_set_ffmpeg():\n    \"\"\"Locate ffmpeg and set IMAGEIO_FFMPEG_EXE and moviepy config when found."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 899,
        "context": "# configure ffmpeg as early as possible\n_find_and_set_ffmpeg()\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3712,
        "context": "    '_HAS_MOVIEPY',\n    '_find_and_set_ffmpeg',\n]"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 696,
        "context": "\ndef _find_and_set_ffmpeg():\n    \"\"\"Locate ffmpeg and set IMAGEIO_FFMPEG_EXE and moviepy config when found."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 899,
        "context": "# configure ffmpeg as early as possible\n_find_and_set_ffmpeg()\n"
      }
    ],
    "call_count": 5,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_measure_text_with_pil",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 746,
        "context": "\ndef _measure_text_with_pil(text: str, pil_font: ImageFont.ImageFont):\n    \"\"\"Measure text size (w, h) using Pillow's textbbox reliably."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 812,
        "context": "        font = _find_system_font(prefer_cjk, font_size)\n        w, h = _measure_text_with_pil(text, font)\n    except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1103,
        "context": "    # helper alias to module-level measurer\n    measure_text = _measure_text_with_pil\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2696,
        "context": "            for i, ch in enumerate(word_zh):\n                ch_w, ch_h = _measure_text_with_pil(ch, pil_font)\n                zh_grp = zh_groups[i] if i < len(zh_groups) else \"\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2704,
        "context": "                for idx_sym, sym in enumerate(zh_lines):\n                    sw, sh = _measure_text_with_pil(sym, pil_font)\n                    zh_w = max(zh_w, sw)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2732,
        "context": "                )\n                ch_w, ch_h = _measure_text_with_pil(ch, pil_font)\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2768,
        "context": "                        for idx_sym, sym in enumerate(symbols):\n                            sw, sh = _measure_text_with_pil(sym, zh_font)\n                            zh_w = max(zh_w, sw)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2785,
        "context": "                    for ts in tone_syms:\n                        tw, th = _measure_text_with_pil(ts, zh_font)\n                        tone_dims.append((tw, th))"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2813,
        "context": "                    draw.text((zh_x, cur_y), sym, font=zh_font, fill=(0, 0, 0))\n                    sw, sh = _measure_text_with_pil(sym, zh_font)\n                    cur_y += sh"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2837,
        "context": "                        else:\n                            tw, th = _measure_text_with_pil(ts, zh_font)\n                        draw.text((tone_x, tcur), ts,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 746,
        "context": "\ndef _measure_text_with_pil(text: str, pil_font: ImageFont.ImageFont):\n    \"\"\"Measure text size (w, h) using Pillow's textbbox reliably."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 812,
        "context": "        font = _find_system_font(prefer_cjk, font_size)\n        w, h = _measure_text_with_pil(text, font)\n    except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1103,
        "context": "    # helper alias to module-level measurer\n    measure_text = _measure_text_with_pil\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2696,
        "context": "            for i, ch in enumerate(word_zh):\n                ch_w, ch_h = _measure_text_with_pil(ch, pil_font)\n                zh_grp = zh_groups[i] if i < len(zh_groups) else \"\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2704,
        "context": "                for idx_sym, sym in enumerate(zh_lines):\n                    sw, sh = _measure_text_with_pil(sym, pil_font)\n                    zh_w = max(zh_w, sw)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2732,
        "context": "                )\n                ch_w, ch_h = _measure_text_with_pil(ch, pil_font)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2768,
        "context": "                        for idx_sym, sym in enumerate(symbols):\n                            sw, sh = _measure_text_with_pil(sym, zh_font)\n                            zh_w = max(zh_w, sw)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2785,
        "context": "                    for ts in tone_syms:\n                        tw, th = _measure_text_with_pil(ts, zh_font)\n                        tone_dims.append((tw, th))"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2813,
        "context": "                    draw.text((zh_x, cur_y), sym, font=zh_font, fill=(0, 0, 0))\n                    sw, sh = _measure_text_with_pil(sym, zh_font)\n                    cur_y += sh"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2837,
        "context": "                        else:\n                            tw, th = _measure_text_with_pil(ts, zh_font)\n                        draw.text((tone_x, tcur), ts,"
      },
      {
        "filepath": "tests/test_zhuyin.py",
        "line_number": 28,
        "context": "    base_font = ImageFont.truetype(font_path, 96)\n    _, ch_h = utils._measure_text_with_pil(ch, base_font)\n    tone_marks = {\"ˊ\", \"ˇ\", \"ˋ\", \"˙\"}"
      },
      {
        "filepath": "tests/test_zhuyin.py",
        "line_number": 41,
        "context": "        for sym in main_syms if main_syms else lines:\n            _, sh = utils._measure_text_with_pil(sym, zh_font)\n            total_main_h += sh + 2"
      }
    ],
    "call_count": 22,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_find_system_font",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 763,
        "context": "\ndef _find_system_font(prefer_cjk: bool, size: int):\n    \"\"\"Try common system font paths; return PIL ImageFont (truetype)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 811,
        "context": "    try:\n        font = _find_system_font(prefer_cjk, font_size)\n        w, h = _measure_text_with_pil(text, font)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1256,
        "context": "        # in this scope yet; measure a sample \"00:00\" string to estimate.\n        timer_font = _find_system_font(False, timer_font_size)\n        tw, th = measure_text(\"00:00\", timer_font)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1284,
        "context": "            # measurements (avoid tiny default bitmap font causing tiny boxes)\n            rf = _find_system_font(False, reveal_font_size)\n            rw, rh = measure_text(word_en, rf)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1353,
        "context": "                # get a PIL font similar to what renderer uses\n                pil_font = _find_system_font(False, reveal_font_size)\n                # measure each character"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 763,
        "context": "\ndef _find_system_font(prefer_cjk: bool, size: int):\n    \"\"\"Try common system font paths; return PIL ImageFont (truetype)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 811,
        "context": "    try:\n        font = _find_system_font(prefer_cjk, font_size)\n        w, h = _measure_text_with_pil(text, font)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1256,
        "context": "        # in this scope yet; measure a sample \"00:00\" string to estimate.\n        timer_font = _find_system_font(False, timer_font_size)\n        tw, th = measure_text(\"00:00\", timer_font)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1284,
        "context": "            # measurements (avoid tiny default bitmap font causing tiny boxes)\n            rf = _find_system_font(False, reveal_font_size)\n            rw, rh = measure_text(word_en, rf)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1353,
        "context": "                # get a PIL font similar to what renderer uses\n                pil_font = _find_system_font(False, reveal_font_size)\n                # measure each character"
      },
      {
        "filepath": "tests/contract/test_text_renderer_contract.py",
        "line_number": 119,
        "context": "\n    def test_find_system_font_returns_valid_path(self):\n        \"\"\"TC-CONTRACT-014: 驗證 find_system_font 回傳有效路徑"
      }
    ],
    "call_count": 11,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_make_text_imageclip",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 795,
        "context": "\ndef _make_text_imageclip(\n    text: str,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1253,
        "context": "    try:\n        # use the same font selection logic as _make_text_imageclip so\n        # measured size matches rendered image. We don't have timer_text"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1260,
        "context": "        tw, th = timer_font_size, timer_font_size // 2\n    # match _make_text_imageclip padding so predicted box\n    # equals rendered image size"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1289,
        "context": "            rh = reveal_font_size\n        # match _make_text_imageclip padding so predicted box equals rendered\n        pad_x = max(12, reveal_font_size // 6)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1339,
        "context": "            # left padding used when constructing the image in\n            # _make_text_imageclip\n            pad_x = max(24, reveal_font_size // 6)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1415,
        "context": "    dimensions to avoid pushing other clips when they appear/disappear.\"\"\"\n    # delegate to _make_text_imageclip which now supports fixed_size\n    return _make_text_imageclip("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1416,
        "context": "    # delegate to _make_text_imageclip which now supports fixed_size\n    return _make_text_imageclip(\n        text=letter,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2177,
        "context": "            # create a sample full reveal clip to measure the runtime size\n            full_rc = _make_text_imageclip(\n                text=word_en, font_size=128, color=(0, 0, 0),"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2653,
        "context": "        else:\n            txt_letters = _make_text_imageclip(\n                text=letters_text, font_size=140, color=(0, 0, 0), duration=duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2964,
        "context": "            start_time = float(entry.get(\"start\", 0.0))\n            tclip = _make_text_imageclip(\n                text=timer_text,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2994,
        "context": "        try:\n            full_rc = _make_text_imageclip(\n                text=word_en, font_size=128, color=(0, 0, 0),"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3021,
        "context": "            # can be drawn below glyphs without overlapping.\n            rc = _make_text_imageclip(\n                text=sub, font_size=128, color=(0, 0, 0), duration=remaining,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3709,
        "context": "    # Test helpers (internal, for testing only)\n    '_make_text_imageclip',\n    '_mpy',"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 795,
        "context": "\ndef _make_text_imageclip(\n    text: str,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1253,
        "context": "    try:\n        # use the same font selection logic as _make_text_imageclip so\n        # measured size matches rendered image. We don't have timer_text"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1260,
        "context": "        tw, th = timer_font_size, timer_font_size // 2\n    # match _make_text_imageclip padding so predicted box\n    # equals rendered image size"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1289,
        "context": "            rh = reveal_font_size\n        # match _make_text_imageclip padding so predicted box equals rendered\n        pad_x = max(12, reveal_font_size // 6)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1339,
        "context": "            # left padding used when constructing the image in\n            # _make_text_imageclip\n            pad_x = max(24, reveal_font_size // 6)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1415,
        "context": "    dimensions to avoid pushing other clips when they appear/disappear.\"\"\"\n    # delegate to _make_text_imageclip which now supports fixed_size\n    return _make_text_imageclip("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1416,
        "context": "    # delegate to _make_text_imageclip which now supports fixed_size\n    return _make_text_imageclip(\n        text=letter,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2177,
        "context": "            # create a sample full reveal clip to measure the runtime size\n            full_rc = _make_text_imageclip(\n                text=word_en, font_size=128, color=(0, 0, 0),"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2653,
        "context": "        else:\n            txt_letters = _make_text_imageclip(\n                text=letters_text, font_size=140, color=(0, 0, 0), duration=duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2964,
        "context": "            start_time = float(entry.get(\"start\", 0.0))\n            tclip = _make_text_imageclip(\n                text=timer_text,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2994,
        "context": "        try:\n            full_rc = _make_text_imageclip(\n                text=word_en, font_size=128, color=(0, 0, 0),"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3021,
        "context": "            # can be drawn below glyphs without overlapping.\n            rc = _make_text_imageclip(\n                text=sub, font_size=128, color=(0, 0, 0), duration=remaining,"
      },
      {
        "filepath": "tests/test_countdown.py",
        "line_number": 13,
        "context": "\n    This test uses the internal _make_text_imageclip helper to render the\n    per-second timer images and checks that the sequence (formatted mm:ss)"
      },
      {
        "filepath": "tests/test_countdown.py",
        "line_number": 44,
        "context": "        \"spellvid.utils\",\n        fromlist=[\"_make_text_imageclip\", \"_HAS_MOVIEPY\", \"_mpy\"],\n    )"
      },
      {
        "filepath": "tests/test_countdown.py",
        "line_number": 46,
        "context": "    )\n    make_clip = getattr(utils_mod, \"_make_text_imageclip\", None)\n    mpy = getattr(utils_mod, \"_mpy\", None)"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 29,
        "context": "\n    若缺少內部渲染 helper（例如 _make_text_imageclip）則跳過測試。\n    \"\"\""
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 46,
        "context": "    # 使用內部的 Pillow 渲染 helper 來生成倒數第一個數字的影像\n    utils = __import__(\"spellvid.utils\", fromlist=[\"_make_text_imageclip\"])\n    make_clip = getattr(utils, \"_make_text_imageclip\", None)"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 47,
        "context": "    utils = __import__(\"spellvid.utils\", fromlist=[\"_make_text_imageclip\"])\n    make_clip = getattr(utils, \"_make_text_imageclip\", None)\n    if make_clip is None:"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 49,
        "context": "    if make_clip is None:\n        pytest.skip(\"_make_text_imageclip helper not available\")\n    # skip if moviepy missing (ImageClip required)"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 114,
        "context": "\n    本測試會使用內部的 `_make_text_imageclip` Pillow 渲染 helper。\n    如果 helper 不存在或無法擷取影格，則跳過測試。"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 133,
        "context": "    # 取得內部渲染 helper\n    utils = __import__(\"spellvid.utils\", fromlist=[\"_make_text_imageclip\"])\n    make_clip = getattr(utils, \"_make_text_imageclip\", None)"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 134,
        "context": "    utils = __import__(\"spellvid.utils\", fromlist=[\"_make_text_imageclip\"])\n    make_clip = getattr(utils, \"_make_text_imageclip\", None)\n    if make_clip is None:"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 136,
        "context": "    if make_clip is None:\n        pytest.skip(\"_make_text_imageclip helper not available\")\n    # skip if moviepy missing (ImageClip required)"
      },
      {
        "filepath": "tests/test_reveal_stable_positions.py",
        "line_number": 44,
        "context": "    # compute fixed canvas from full word (mirrors renderer behavior)\n    full = utils._make_text_imageclip(\n        text=word, font_size=128, extra_bottom=32, duration=1"
      },
      {
        "filepath": "tests/test_reveal_stable_positions.py",
        "line_number": 57,
        "context": "    # single-letter clip for first letter\n    a = utils._make_text_imageclip(\n        text=word[0],"
      },
      {
        "filepath": "tests/test_reveal_stable_positions.py",
        "line_number": 69,
        "context": "    # same fixed canvas\n    b = utils._make_text_imageclip(\n        text=word[:2],"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 43,
        "context": "\n    mod = __import__(\"spellvid.utils\", fromlist=[\"_make_text_imageclip\"])\n    make_clip = getattr(mod, \"_make_text_imageclip\", None)"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 44,
        "context": "    mod = __import__(\"spellvid.utils\", fromlist=[\"_make_text_imageclip\"])\n    make_clip = getattr(mod, \"_make_text_imageclip\", None)\n    if make_clip is None:"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 141,
        "context": "    # render full word (headless) using internal helper\n    mod = __import__(\"spellvid.utils\", fromlist=[\"_make_text_imageclip\"])\n    make_clip = getattr(mod, \"_make_text_imageclip\", None)"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 142,
        "context": "    mod = __import__(\"spellvid.utils\", fromlist=[\"_make_text_imageclip\"])\n    make_clip = getattr(mod, \"_make_text_imageclip\", None)\n    if make_clip is None:"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 144,
        "context": "    if make_clip is None:\n        pytest.skip(\"_make_text_imageclip not available\")\n"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 160,
        "context": "    # or very bright) pixels; any dark pixels indicate overlap with glyphs.\n    # The clip returned by _make_text_imageclip includes padding used by\n    # compute_layout_bboxes, so underline local coords map directly into frame."
      },
      {
        "filepath": "tests/contract/test_reexport_layer_contract.py",
        "line_number": 292,
        "context": "    - from spellvid.utils import render_video_stub\n    - from spellvid.utils import _make_text_imageclip\n    等等"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 94,
        "context": "        from spellvid.utils import (  # noqa: F401\n            _make_text_imageclip,\n            _mpy,"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 99,
        "context": "\n        # _make_text_imageclip 應該可呼叫\n        assert callable(_make_text_imageclip), ("
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 100,
        "context": "        # _make_text_imageclip 應該可呼叫\n        assert callable(_make_text_imageclip), (\n            \"_make_text_imageclip should be callable\""
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 101,
        "context": "        assert callable(_make_text_imageclip), (\n            \"_make_text_imageclip should be callable\"\n        )"
      }
    ],
    "call_count": 50,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "load_json",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 941,
        "context": "\ndef load_json(path: str) -> Any:\n    with open(path, \"r\", encoding=\"utf-8\") as f:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 941,
        "context": "\ndef load_json(path: str) -> Any:\n    with open(path, \"r\", encoding=\"utf-8\") as f:"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 5,
        "context": "- validate_schema() 驗證 JSON 資料符合 schema\n- load_json() 載入 JSON 檔案\n- SCHEMA 定義的完整性"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 139,
        "context": "\n# === load_json() 測試 ===\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 141,
        "context": "\ndef test_load_json_valid_file(tmp_path):\n    \"\"\"驗證 load_json() 可正確載入 JSON 陣列"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 142,
        "context": "def test_load_json_valid_file(tmp_path):\n    \"\"\"驗證 load_json() 可正確載入 JSON 陣列\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 148,
        "context": "    \"\"\"\n    from spellvid.shared.validation import load_json\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 159,
        "context": "    # 載入並驗證\n    result = load_json(str(json_file))\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 167,
        "context": "\ndef test_load_json_file_not_found():\n    \"\"\"驗證 load_json() 處理檔案不存在"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 168,
        "context": "def test_load_json_file_not_found():\n    \"\"\"驗證 load_json() 處理檔案不存在\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 174,
        "context": "    \"\"\"\n    from spellvid.shared.validation import load_json\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 177,
        "context": "    with pytest.raises(FileNotFoundError):\n        load_json(\"non_existent_file.json\")\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 180,
        "context": "\ndef test_load_json_invalid_json(tmp_path):\n    \"\"\"驗證 load_json() 處理無效 JSON"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 181,
        "context": "def test_load_json_invalid_json(tmp_path):\n    \"\"\"驗證 load_json() 處理無效 JSON\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 187,
        "context": "    \"\"\"\n    from spellvid.shared.validation import load_json\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 193,
        "context": "    with pytest.raises(json.JSONDecodeError):\n        load_json(str(json_file))\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 196,
        "context": "\ndef test_load_json_not_array(tmp_path):\n    \"\"\"驗證 load_json 處理非陣列 JSON"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 197,
        "context": "def test_load_json_not_array(tmp_path):\n    \"\"\"驗證 load_json 處理非陣列 JSON\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 203,
        "context": "    \"\"\"\n    from spellvid.shared.validation import load_json\n    import pytest"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 211,
        "context": "    with pytest.raises(TypeError, match=\"JSON 根節點必須是陣列\"):\n        load_json(str(json_file))\n"
      },
      {
        "filepath": "spellvid/cli/commands.py",
        "line_number": 13,
        "context": "from ..shared.types import VideoConfig\nfrom ..shared.validation import load_json\nfrom ..application.video_service import render_video"
      },
      {
        "filepath": "spellvid/cli/commands.py",
        "line_number": 120,
        "context": "\n        data = load_json(str(json_path))\n"
      },
      {
        "filepath": "spellvid/shared/validation.py",
        "line_number": 6,
        "context": "- validate_schema: 驗證單一資料項目\n- load_json: 從檔案載入並解析 JSON\n"
      },
      {
        "filepath": "spellvid/shared/validation.py",
        "line_number": 151,
        "context": "\ndef load_json(file_path: str) -> List[dict]:\n    \"\"\"從檔案載入 JSON 陣列"
      },
      {
        "filepath": "spellvid/shared/validation.py",
        "line_number": 168,
        "context": "    Example:\n        >>> items = load_json(\"config.json\")\n        >>> len(items)"
      },
      {
        "filepath": "spellvid/shared/__init__.py",
        "line_number": 43,
        "context": "    validate_schema,\n    load_json,\n)"
      },
      {
        "filepath": "spellvid/shared/__init__.py",
        "line_number": 82,
        "context": "    \"validate_schema\",\n    \"load_json\",\n]"
      }
    ],
    "call_count": 27,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "validate_schema",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 946,
        "context": "\ndef validate_schema(data: Any) -> List[str]:\n    \"\"\"Very small schema validator: returns list of errors (empty if ok).\"\"\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 946,
        "context": "\ndef validate_schema(data: Any) -> List[str]:\n    \"\"\"Very small schema validator: returns list of errors (empty if ok).\"\"\""
      },
      {
        "filepath": "tests/test_integration.py",
        "line_number": 5,
        "context": "\ndef test_validate_schema_and_missing_fields(tmp_path):\n    \"\"\"驗證 schema 檢查是否偵測到缺少必要欄位。"
      },
      {
        "filepath": "tests/test_integration.py",
        "line_number": 11,
        "context": "    data = [{\"letters\": \"I i\", \"word_en\": \"Ice\"}]\n    errors = utils.validate_schema(data)\n    assert any(\"missing required\" in e for e in errors)"
      },
      {
        "filepath": "tests/test_video_mode.py",
        "line_number": 111,
        "context": "\n    errors = utils.validate_schema([valid_item])\n    assert len(errors) == 0"
      },
      {
        "filepath": "tests/test_video_mode.py",
        "line_number": 115,
        "context": "    valid_item[\"video_mode\"] = \"cover\"\n    errors = utils.validate_schema([valid_item])\n    assert len(errors) == 0"
      },
      {
        "filepath": "tests/test_video_mode.py",
        "line_number": 120,
        "context": "    del valid_item[\"video_mode\"]\n    errors = utils.validate_schema([valid_item])\n    assert len(errors) == 0"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 4,
        "context": "測試目標:\n- validate_schema() 驗證 JSON 資料符合 schema\n- load_json() 載入 JSON 檔案"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 15,
        "context": "\n# === TC-RESOURCE-001: validate_schema() 驗證通過 ===\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 17,
        "context": "\ndef test_validate_schema_valid_minimal():\n    \"\"\"驗證最小必填欄位通過 schema 驗證"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 24,
        "context": "    \"\"\"\n    from spellvid.shared.validation import validate_schema\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 33,
        "context": "    # 不應拋出異常\n    validate_schema(data)\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 36,
        "context": "\ndef test_validate_schema_valid_full():\n    \"\"\"驗證完整欄位通過 schema 驗證"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 43,
        "context": "    \"\"\"\n    from spellvid.shared.validation import validate_schema\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 57,
        "context": "\n    validate_schema(data)\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 60,
        "context": "\n# === TC-RESOURCE-002: validate_schema() 驗證失敗 ===\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 62,
        "context": "\ndef test_validate_schema_missing_required_field():\n    \"\"\"驗證缺少必填欄位時拋出異常"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 69,
        "context": "    \"\"\"\n    from spellvid.shared.validation import validate_schema\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 77,
        "context": "    with pytest.raises(Exception):  # jsonschema.ValidationError\n        validate_schema(data)\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 80,
        "context": "\ndef test_validate_schema_invalid_type_letters():\n    \"\"\"驗證 letters 型別錯誤時拋出異常"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 87,
        "context": "    \"\"\"\n    from spellvid.shared.validation import validate_schema\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 96,
        "context": "    with pytest.raises(Exception):\n        validate_schema(data)\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 99,
        "context": "\ndef test_validate_schema_invalid_countdown_sec():\n    \"\"\"驗證 countdown_sec 型別錯誤時拋出異常"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 106,
        "context": "    \"\"\"\n    from spellvid.shared.validation import validate_schema\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 116,
        "context": "    with pytest.raises(Exception):\n        validate_schema(data)\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 119,
        "context": "\ndef test_validate_schema_invalid_timer_visible():\n    \"\"\"驗證 timer_visible 型別錯誤時拋出異常"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 126,
        "context": "    \"\"\"\n    from spellvid.shared.validation import validate_schema\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 136,
        "context": "    with pytest.raises(Exception):\n        validate_schema(data)\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 258,
        "context": "\ndef test_validate_schema_rejects_empty_dict():\n    \"\"\"驗證空字典無法通過驗證"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 265,
        "context": "    \"\"\"\n    from spellvid.shared.validation import validate_schema\n"
      },
      {
        "filepath": "tests/unit/shared/test_validation.py",
        "line_number": 268,
        "context": "    with pytest.raises(Exception):\n        validate_schema({})"
      },
      {
        "filepath": "spellvid/shared/validation.py",
        "line_number": 5,
        "context": "- SCHEMA: JSON Schema 定義(Draft-07 規範)\n- validate_schema: 驗證單一資料項目\n- load_json: 從檔案載入並解析 JSON"
      },
      {
        "filepath": "spellvid/shared/validation.py",
        "line_number": 76,
        "context": "        >>> try:\n        ...     validate_schema({})  # 缺少必填欄位\n        ... except ValidationError as e:"
      },
      {
        "filepath": "spellvid/shared/validation.py",
        "line_number": 89,
        "context": "\ndef validate_schema(data: dict) -> None:\n    \"\"\"驗證單一資料項目符合 SCHEMA 定義"
      },
      {
        "filepath": "spellvid/shared/validation.py",
        "line_number": 105,
        "context": "    Example:\n        >>> validate_schema({\"letters\": \"A\", \"word_en\": \"A\", \"word_zh\": \"A\"})  # 通過\n        >>> validate_schema({\"letters\": \"A\"})  # ValidationError: 缺少 word_en, word_zh"
      },
      {
        "filepath": "spellvid/shared/validation.py",
        "line_number": 106,
        "context": "        >>> validate_schema({\"letters\": \"A\", \"word_en\": \"A\", \"word_zh\": \"A\"})  # 通過\n        >>> validate_schema({\"letters\": \"A\"})  # ValidationError: 缺少 word_en, word_zh\n    \"\"\""
      },
      {
        "filepath": "spellvid/shared/__init__.py",
        "line_number": 42,
        "context": "    ValidationError,\n    validate_schema,\n    load_json,"
      },
      {
        "filepath": "spellvid/shared/__init__.py",
        "line_number": 81,
        "context": "    \"ValidationError\",\n    \"validate_schema\",\n    \"load_json\","
      }
    ],
    "call_count": 38,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_zhuyin_main_gap",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 982,
        "context": "\ndef _zhuyin_main_gap(symbol_count: int) -> int:\n    \"\"\"Return vertical gap (px) between stacked zhuyin symbols.\"\"\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1197,
        "context": "                symbol_count = len(symbols)\n                gap = _zhuyin_main_gap(symbol_count)\n                zh_w = 0"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2700,
        "context": "                symbol_count = len(zh_lines)\n                gap = _zhuyin_main_gap(symbol_count)\n                zh_w = 0"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2753,
        "context": "                symbol_count = len(symbols)\n                main_gap = _zhuyin_main_gap(symbol_count)\n                try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2806,
        "context": "                symbol_count = len(symbols)\n                main_gap = _zhuyin_main_gap(symbol_count)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 982,
        "context": "\ndef _zhuyin_main_gap(symbol_count: int) -> int:\n    \"\"\"Return vertical gap (px) between stacked zhuyin symbols.\"\"\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1197,
        "context": "                symbol_count = len(symbols)\n                gap = _zhuyin_main_gap(symbol_count)\n                zh_w = 0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2700,
        "context": "                symbol_count = len(zh_lines)\n                gap = _zhuyin_main_gap(symbol_count)\n                zh_w = 0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2753,
        "context": "                symbol_count = len(symbols)\n                main_gap = _zhuyin_main_gap(symbol_count)\n                try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2806,
        "context": "                symbol_count = len(symbols)\n                main_gap = _zhuyin_main_gap(symbol_count)\n"
      },
      {
        "filepath": "spellvid/domain/typography.py",
        "line_number": 174,
        "context": "\ndef _zhuyin_main_gap(symbol_count: int) -> int:\n    \"\"\"計算注音符號之間的垂直間距"
      }
    ],
    "call_count": 11,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "zhuyin_for",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 991,
        "context": "\ndef zhuyin_for(text: str) -> str:\n    \"\"\"Return a naive zhuyin by joining per-character lookup."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1147,
        "context": "    word_zh = item.get(\"word_zh\", \"\")\n    zhuyin = zhuyin_for(word_zh)\n    if word_zh:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2662,
        "context": "    word_zh = item.get(\"word_zh\", \"\")\n    zhuyin = zhuyin_for(word_zh)\n    if word_zh:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2687,
        "context": "\n            # split zhuyin per character (space separated by zhuyin_for)\n            zh_groups = zhuyin.split() if zhuyin else []"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 991,
        "context": "\ndef zhuyin_for(text: str) -> str:\n    \"\"\"Return a naive zhuyin by joining per-character lookup."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1147,
        "context": "    word_zh = item.get(\"word_zh\", \"\")\n    zhuyin = zhuyin_for(word_zh)\n    if word_zh:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2662,
        "context": "    word_zh = item.get(\"word_zh\", \"\")\n    zhuyin = zhuyin_for(word_zh)\n    if word_zh:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2687,
        "context": "\n            # split zhuyin per character (space separated by zhuyin_for)\n            zh_groups = zhuyin.split() if zhuyin else []"
      },
      {
        "filepath": "tests/test_zhuyin.py",
        "line_number": 54,
        "context": "    \"\"\"\n    res = utils.zhuyin_for(\"冰塊\")\n    assert \"ㄅㄧㄥ\" in res and \"ㄎㄨㄞˋ\" in res"
      },
      {
        "filepath": "tests/test_zhuyin.py",
        "line_number": 70,
        "context": "    \"\"\"確認內建注音對照涵蓋常用動物詞彙\"\"\"\n    res = utils.zhuyin_for(\"動物\")\n    assert \"ㄉㄨㄥˋ\" in res"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 20,
        "context": "\n    def test_zhuyin_for_valid_chars(self):\n        \"\"\"TC-TYPO-001: 驗證常見中文字的注音轉換"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 27,
        "context": "        \"\"\"\n        from spellvid.domain.typography import zhuyin_for\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 30,
        "context": "        # 測試常見字\n        assert zhuyin_for(\"冰\") == \"ㄅㄧㄥ\", \"冰 應該轉換為 ㄅㄧㄥ\"\n        assert zhuyin_for(\"雪\") == \"ㄒㄩㄝˇ\", \"雪 應該轉換為 ㄒㄩㄝˇ\""
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 31,
        "context": "        assert zhuyin_for(\"冰\") == \"ㄅㄧㄥ\", \"冰 應該轉換為 ㄅㄧㄥ\"\n        assert zhuyin_for(\"雪\") == \"ㄒㄩㄝˇ\", \"雪 應該轉換為 ㄒㄩㄝˇ\"\n        assert zhuyin_for(\"山\") == \"ㄕㄢ\", \"山 應該轉換為 ㄕㄢ\""
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 32,
        "context": "        assert zhuyin_for(\"雪\") == \"ㄒㄩㄝˇ\", \"雪 應該轉換為 ㄒㄩㄝˇ\"\n        assert zhuyin_for(\"山\") == \"ㄕㄢ\", \"山 應該轉換為 ㄕㄢ\"\n        assert zhuyin_for(\"水\") == \"ㄕㄨㄟˇ\", \"水 應該轉換為 ㄕㄨㄟˇ\""
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 33,
        "context": "        assert zhuyin_for(\"山\") == \"ㄕㄢ\", \"山 應該轉換為 ㄕㄢ\"\n        assert zhuyin_for(\"水\") == \"ㄕㄨㄟˇ\", \"水 應該轉換為 ㄕㄨㄟˇ\"\n        assert zhuyin_for(\"火\") == \"ㄏㄨㄛˇ\", \"火 應該轉換為 ㄏㄨㄛˇ\""
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 34,
        "context": "        assert zhuyin_for(\"水\") == \"ㄕㄨㄟˇ\", \"水 應該轉換為 ㄕㄨㄟˇ\"\n        assert zhuyin_for(\"火\") == \"ㄏㄨㄛˇ\", \"火 應該轉換為 ㄏㄨㄛˇ\"\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 36,
        "context": "\n    def test_zhuyin_for_tone_marks(self):\n        \"\"\"TC-TYPO-002: 驗證帶聲調的注音"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 43,
        "context": "        \"\"\"\n        from spellvid.domain.typography import zhuyin_for\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 46,
        "context": "        # 一聲(無標記)\n        assert zhuyin_for(\"冰\") == \"ㄅㄧㄥ\"\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 49,
        "context": "        # 二聲(ˊ)\n        assert zhuyin_for(\"台\") == \"ㄊㄞˊ\"\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 52,
        "context": "        # 三聲(ˇ)\n        assert zhuyin_for(\"雪\") == \"ㄒㄩㄝˇ\"\n        assert zhuyin_for(\"水\") == \"ㄕㄨㄟˇ\""
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 53,
        "context": "        assert zhuyin_for(\"雪\") == \"ㄒㄩㄝˇ\"\n        assert zhuyin_for(\"水\") == \"ㄕㄨㄟˇ\"\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 56,
        "context": "        # 四聲(ˋ)\n        assert zhuyin_for(\"是\") == \"ㄕˋ\"\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 61,
        "context": "\n    def test_zhuyin_for_invalid_chars(self):\n        \"\"\"TC-TYPO-003: 驗證非中文字元回傳 None"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 68,
        "context": "        \"\"\"\n        from spellvid.domain.typography import zhuyin_for\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 71,
        "context": "        # 英文字母\n        assert zhuyin_for(\"A\") is None\n        assert zhuyin_for(\"abc\") is None"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 72,
        "context": "        assert zhuyin_for(\"A\") is None\n        assert zhuyin_for(\"abc\") is None\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 75,
        "context": "        # 數字\n        assert zhuyin_for(\"1\") is None\n        assert zhuyin_for(\"123\") is None"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 76,
        "context": "        assert zhuyin_for(\"1\") is None\n        assert zhuyin_for(\"123\") is None\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 79,
        "context": "        # 空字串\n        assert zhuyin_for(\"\") is None\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 82,
        "context": "        # 標點符號\n        assert zhuyin_for(\"。\") is None\n        assert zhuyin_for(\"!\") is None"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 83,
        "context": "        assert zhuyin_for(\"。\") is None\n        assert zhuyin_for(\"!\") is None\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 86,
        "context": "        # 多個字元(非單一字)\n        assert zhuyin_for(\"你好\") is None\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 88,
        "context": "\n    def test_zhuyin_for_uncommon_chars(self):\n        \"\"\"TC-TYPO-004: 驗證罕見字的處理"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 95,
        "context": "        \"\"\"\n        from spellvid.domain.typography import zhuyin_for\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 99,
        "context": "        # 設計應該決定是回傳 None 還是拋出異常\n        result = zhuyin_for(\"㗊\")  # 罕用字範例\n        assert result is None or isinstance(result, str)"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 258,
        "context": "\n    def test_zhuyin_for_empty_string(self):\n        \"\"\"TC-TYPO-013: 驗證空字串處理"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 264,
        "context": "        \"\"\"\n        from spellvid.domain.typography import zhuyin_for\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 266,
        "context": "\n        result = zhuyin_for(\"\")\n        assert result is None, \"空字串應該回傳 None\""
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 281,
        "context": "\n    def test_zhuyin_for_unicode_variants(self):\n        \"\"\"TC-TYPO-015: 驗證 Unicode 變體字的處理"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 287,
        "context": "        \"\"\"\n        from spellvid.domain.typography import zhuyin_for\n"
      },
      {
        "filepath": "tests/unit/domain/test_typography.py",
        "line_number": 291,
        "context": "        # 這裡測試是否有基本容錯\n        result = zhuyin_for(\"台\")  # vs 臺\n        # 應該要有結果或至少不拋出異常"
      },
      {
        "filepath": "spellvid/domain/typography.py",
        "line_number": 11,
        "context": "使用:\n    from spellvid.domain.typography import zhuyin_for, split_zhuyin_symbols\n    "
      },
      {
        "filepath": "spellvid/domain/typography.py",
        "line_number": 13,
        "context": "    \n    zhuyin = zhuyin_for(\"冰\")  # \"ㄅㄧㄥ\"\n    main, tone = split_zhuyin_symbols(zhuyin)  # ([\"ㄅ\", \"ㄧ\", \"ㄥ\"], None)"
      },
      {
        "filepath": "spellvid/domain/typography.py",
        "line_number": 65,
        "context": "\ndef zhuyin_for(chinese_char: str) -> Optional[str]:\n    \"\"\"查詢單一中文字的注音符號"
      },
      {
        "filepath": "spellvid/domain/typography.py",
        "line_number": 78,
        "context": "    Examples:\n        >>> zhuyin_for(\"冰\")\n        'ㄅㄧㄥ'"
      },
      {
        "filepath": "spellvid/domain/typography.py",
        "line_number": 80,
        "context": "        'ㄅㄧㄥ'\n        >>> zhuyin_for(\"雪\")\n        'ㄒㄩㄝˊ'"
      },
      {
        "filepath": "spellvid/domain/typography.py",
        "line_number": 82,
        "context": "        'ㄒㄩㄝˊ'\n        >>> zhuyin_for(\"A\")\n        None"
      }
    ],
    "call_count": 49,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_layout_zhuyin_column",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1025,
        "context": "\ndef _layout_zhuyin_column(\n    cursor_y: int,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2789,
        "context": "\n                tone_layout = _layout_zhuyin_column(\n                    cursor_y=cursor_y,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1025,
        "context": "\ndef _layout_zhuyin_column(\n    cursor_y: int,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2789,
        "context": "\n                tone_layout = _layout_zhuyin_column(\n                    cursor_y=cursor_y,"
      },
      {
        "filepath": "tests/test_zhuyin.py",
        "line_number": 91,
        "context": "    tone_sizes = [(18, 18)]\n    layout = utils._layout_zhuyin_column(\n        cursor_y=cursor_y,"
      },
      {
        "filepath": "tests/test_zhuyin.py",
        "line_number": 114,
        "context": "    total_main_h = 100\n    layout = utils._layout_zhuyin_column(\n        cursor_y=cursor_y,"
      },
      {
        "filepath": "tests/test_zhuyin.py",
        "line_number": 131,
        "context": "    tone_sizes = [(16, 20)]\n    layout = utils._layout_zhuyin_column(\n        cursor_y=cursor_y,"
      }
    ],
    "call_count": 7,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "compute_layout_bboxes",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1086,
        "context": "\ndef compute_layout_bboxes(\n    item: Dict[str, Any], video_size=(1920, 1080)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1302,
        "context": "        # renderer composes the reveal ImageClip centered on the video\n        # and previously compute_layout_bboxes returned rx=0 which made\n        # the caller treat underline positions as local to the reveal"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2240,
        "context": "                    # determine reveal_top using runtime measurement or\n                    # fallback to compute_layout_bboxes\n                    rbox = None"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2248,
        "context": "                    else:\n                        rbox = compute_layout_bboxes(item).get(\n                            \"reveal\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2277,
        "context": "                # placement if available (preferred), otherwise fall back\n                # to compute_layout_bboxes estimate.\n                try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2285,
        "context": "                    else:\n                        rbox = compute_layout_bboxes(item).get(\"reveal\")\n                        reveal_top = ("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2342,
        "context": "                            else:\n                                rbox = compute_layout_bboxes(item).get(\n                                    \"reveal\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2581,
        "context": "                            else:\n                                rbox = compute_layout_bboxes(item).get(\n                                    \"reveal\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3038,
        "context": "\n        # If reveal_underlines metadata exists (from compute_layout_bboxes),\n        # create small ImageClips for each underline and overlay them at"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3043,
        "context": "        try:\n            r_meta = compute_layout_bboxes(item).get(\"reveal_underlines\")\n            r_box = compute_layout_bboxes(item).get(\"reveal\")"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3044,
        "context": "            r_meta = compute_layout_bboxes(item).get(\"reveal_underlines\")\n            r_box = compute_layout_bboxes(item).get(\"reveal\")\n        except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3682,
        "context": "    'render_video_moviepy',\n    'compute_layout_bboxes',\n    'check_assets',"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1086,
        "context": "\ndef compute_layout_bboxes(\n    item: Dict[str, Any], video_size=(1920, 1080)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1302,
        "context": "        # renderer composes the reveal ImageClip centered on the video\n        # and previously compute_layout_bboxes returned rx=0 which made\n        # the caller treat underline positions as local to the reveal"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2240,
        "context": "                    # determine reveal_top using runtime measurement or\n                    # fallback to compute_layout_bboxes\n                    rbox = None"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2248,
        "context": "                    else:\n                        rbox = compute_layout_bboxes(item).get(\n                            \"reveal\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2277,
        "context": "                # placement if available (preferred), otherwise fall back\n                # to compute_layout_bboxes estimate.\n                try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2285,
        "context": "                    else:\n                        rbox = compute_layout_bboxes(item).get(\"reveal\")\n                        reveal_top = ("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2342,
        "context": "                            else:\n                                rbox = compute_layout_bboxes(item).get(\n                                    \"reveal\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2581,
        "context": "                            else:\n                                rbox = compute_layout_bboxes(item).get(\n                                    \"reveal\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3038,
        "context": "\n        # If reveal_underlines metadata exists (from compute_layout_bboxes),\n        # create small ImageClips for each underline and overlay them at"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3043,
        "context": "        try:\n            r_meta = compute_layout_bboxes(item).get(\"reveal_underlines\")\n            r_box = compute_layout_bboxes(item).get(\"reveal\")"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3044,
        "context": "            r_meta = compute_layout_bboxes(item).get(\"reveal_underlines\")\n            r_box = compute_layout_bboxes(item).get(\"reveal\")\n        except Exception:"
      },
      {
        "filepath": "tests/test_countdown.py",
        "line_number": 121,
        "context": "\n    boxes = utils.compute_layout_bboxes(item)\n    timer_box = boxes.get(\"timer\")"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 14,
        "context": "\nfrom spellvid.utils import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 27,
        "context": "def test_countdown_timer_pixel_not_exceed_assigned_box():\n    \"\"\"檢查倒數計時的實際像素 bbox 是否超過 compute_layout_bboxes 預測的 timer bbox。\n"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 41,
        "context": "\n    boxes = compute_layout_bboxes(item)\n    timer_box = boxes.get(\"timer\")"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 111,
        "context": "    兩個失敗條件：\n    - 實際渲染的字元像素超出 compute_layout_bboxes 所分配的 reveal box\n    - 實際渲染的字元像素落在整體影像（1920x1080）之外"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 128,
        "context": "\n    boxes = compute_layout_bboxes(item)\n    reveal_box = boxes.get(\"reveal\")"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 141,
        "context": "\n    # compute_layout_bboxes 使用 reveal_font_size = 128\n    # 我們在測試中也以相同大小來渲染以便比較"
      },
      {
        "filepath": "tests/test_letters_images.py",
        "line_number": 16,
        "context": "    }\n    boxes = utils.compute_layout_bboxes(item)\n    letters_box = boxes.get(\"letters\")"
      },
      {
        "filepath": "tests/test_letters_images.py",
        "line_number": 77,
        "context": "    }\n    boxes = utils.compute_layout_bboxes(item)\n    letters_box = boxes.get(\"letters\")"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 5,
        "context": "import pytest\nfrom spellvid.utils import compute_layout_bboxes\nfrom spellvid import utils as sv_utils"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 26,
        "context": "def test_reveal_underlines_boxes_exist_and_count_matches_letters():\n    \"\"\"確認 compute_layout_bboxes 會為 reveal 產生對應的 underline boxes，且數量與字數一致。\"\"\"\n    item = _sample_item()"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 28,
        "context": "    item = _sample_item()\n    boxes = sv_utils.compute_layout_bboxes(item)\n    assert \"reveal\" in boxes"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 38,
        "context": "    item = _sample_item()\n    boxes = sv_utils.compute_layout_bboxes(item)\n    underlines = boxes.get(\"reveal_underlines\")"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 69,
        "context": "def test_reveal_underlines_drawn_in_video(tmp_path):\n    \"\"\"整合檢查：在產生的影片影格中能找到在 compute_layout_bboxes 計算出的 underline（粗略檢驗）。\"\"\"\n    item = _sample_item()"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 95,
        "context": "\n        boxes = sv_utils.compute_layout_bboxes(item)\n        underlines = boxes.get(\"reveal_underlines\", [])"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 134,
        "context": "    # get computed layout\n    boxes = sv_utils.compute_layout_bboxes(item)\n    rbox = boxes.get(\"reveal\")"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 146,
        "context": "\n    # render using the same extra_bottom reserved by compute_layout_bboxes\n    clip = make_clip("
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 161,
        "context": "    # The clip returned by _make_text_imageclip includes padding used by\n    # compute_layout_bboxes, so underline local coords map directly into frame.\n    found_overlap = False"
      },
      {
        "filepath": "tests/test_video_arm_sizing.py",
        "line_number": 27,
        "context": "    # Get layout boxes to compare\n    boxes = utils.compute_layout_bboxes(item)\n    reveal_box = boxes.get(\"reveal\")"
      },
      {
        "filepath": "tests/test_video_arm_sizing.py",
        "line_number": 30,
        "context": "    assert reveal_box is not None, (\n        \"compute_layout_bboxes did not return reveal\"\n    )"
      },
      {
        "filepath": "tests/test_video_overlap.py",
        "line_number": 9,
        "context": "    reveal (word) area. We check layout bboxes from\n    `compute_layout_bboxes` and also the renderer placement when available.\n    \"\"\""
      },
      {
        "filepath": "tests/test_video_overlap.py",
        "line_number": 28,
        "context": "    # get the computed layout boxes (deterministic; independent of moviepy)\n    boxes = utils.compute_layout_bboxes(item)\n"
      },
      {
        "filepath": "tests/test_video_overlap.py",
        "line_number": 30,
        "context": "\n    # compute_layout_bboxes returns 'reveal' and related metadata\n    reveal_box = boxes.get(\"reveal\")"
      },
      {
        "filepath": "tests/test_video_overlap.py",
        "line_number": 34,
        "context": "        reveal_box is not None\n    ), \"compute_layout_bboxes did not return reveal\"\n"
      },
      {
        "filepath": "tests/test_video_overlap.py",
        "line_number": 54,
        "context": "\n    # We'll validate using the renderer placement below; compute_layout_bboxes\n    # provides the reveal_box which we use as the authoritative bottom area."
      },
      {
        "filepath": "tests/integration/test_video_service.py",
        "line_number": 61,
        "context": "        前置條件: VideoService 與 domain.layout 已實作\n        預期結果: 呼叫 compute_layout_bboxes() 並使用結果\n        \"\"\""
      },
      {
        "filepath": "tests/integration/test_video_service.py",
        "line_number": 73,
        "context": "\n        with patch(\"spellvid.application.video_service.compute_layout_bboxes\") as mock_layout:\n            mock_layout.return_value = MagicMock()"
      },
      {
        "filepath": "tests/integration/test_video_service.py",
        "line_number": 80,
        "context": "\n            assert mock_layout.called, \"應該呼叫 compute_layout_bboxes\"\n            assert mock_layout.call_args[0][0] == config, \\"
      },
      {
        "filepath": "tests/performance/test_benchmarks.py",
        "line_number": 4,
        "context": "這些測試驗證重構後的效能表現:\n1. 領域邏輯效能 (compute_layout_bboxes < 50ms)\n2. Dry-run 效能 (< 100ms)"
      },
      {
        "filepath": "tests/performance/test_benchmarks.py",
        "line_number": 19,
        "context": "from spellvid.shared.types import VideoConfig\nfrom spellvid.domain.layout import compute_layout_bboxes\nfrom spellvid.application.video_service import render_video"
      },
      {
        "filepath": "tests/performance/test_benchmarks.py",
        "line_number": 36,
        "context": "        start = time.perf_counter()\n        result = compute_layout_bboxes(config)\n        elapsed = (time.perf_counter() - start) * 1000  # ms"
      },
      {
        "filepath": "tests/performance/test_benchmarks.py",
        "line_number": 42,
        "context": "\n        print(f\"\\n[PERF] compute_layout_bboxes: {elapsed:.2f}ms\")\n"
      },
      {
        "filepath": "tests/performance/test_benchmarks.py",
        "line_number": 55,
        "context": "        for _ in range(100):\n            result = compute_layout_bboxes(config)\n        elapsed = (time.perf_counter() - start) * 1000  # ms"
      },
      {
        "filepath": "tests/performance/test_benchmarks.py",
        "line_number": 62,
        "context": "        print(\n            f\"\\n[PERF] 100x compute_layout_bboxes: {elapsed:.2f}ms total, {avg_per_call:.2f}ms avg\")\n"
      },
      {
        "filepath": "tests/performance/test_benchmarks.py",
        "line_number": 170,
        "context": "        start = time.perf_counter()\n        result = compute_layout_bboxes(config)\n        elapsed = (time.perf_counter() - start) * 1000"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 28,
        "context": "\ndef test_compute_layout_bboxes_available():\n    \"\"\"確認 compute_layout_bboxes 函數可以 import\"\"\""
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 29,
        "context": "def test_compute_layout_bboxes_available():\n    \"\"\"確認 compute_layout_bboxes 函數可以 import\"\"\"\n    with warnings.catch_warnings(record=True):"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 32,
        "context": "        warnings.simplefilter(\"always\")\n        from spellvid.utils import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 35,
        "context": "        # 檢查函數可呼叫\n        assert callable(compute_layout_bboxes), (\n            \"compute_layout_bboxes should be callable\""
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 36,
        "context": "        assert callable(compute_layout_bboxes), (\n            \"compute_layout_bboxes should be callable\"\n        )"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 162,
        "context": "        )\n        assert 'compute_layout_bboxes' in all_list, (\n            \"__all__ should include 'compute_layout_bboxes'\""
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 163,
        "context": "        assert 'compute_layout_bboxes' in all_list, (\n            \"__all__ should include 'compute_layout_bboxes'\"\n        )"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 22,
        "context": "        \"\"\"TC-LAYOUT-001: 驗證基本佈局計算\"\"\"\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 25,
        "context": "        config = VideoConfig(letters=\"I i\", word_en=\"Ice\", word_zh=\"冰\")\n        result = compute_layout_bboxes(config)\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 41,
        "context": "        \"\"\"TC-LAYOUT-002: 驗證字母與中文區域不重疊\"\"\"\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 44,
        "context": "        config = VideoConfig(letters=\"ABC abc\", word_en=\"Apple\", word_zh=\"蘋果\")\n        result = compute_layout_bboxes(config)\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 52,
        "context": "        \"\"\"TC-LAYOUT-003: 驗證所有元素在畫布範圍內\"\"\"\n        from spellvid.domain.layout import compute_layout_bboxes\n        from spellvid.shared.constants import CANVAS_WIDTH, CANVAS_HEIGHT"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 62,
        "context": "            config = VideoConfig(**data)\n            result = compute_layout_bboxes(config)\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 78,
        "context": "        \"\"\"TC-LAYOUT-004: 驗證注音符號排版存在\"\"\"\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 81,
        "context": "        config = VideoConfig(letters=\"I i\", word_en=\"Ice\", word_zh=\"冰\")\n        result = compute_layout_bboxes(config)\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 88,
        "context": "        \"\"\"TC-LAYOUT-005: 驗證注音水平排列順序\"\"\"\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 91,
        "context": "        config = VideoConfig(letters=\"A a\", word_en=\"A\", word_zh=\"冰雪\")\n        result = compute_layout_bboxes(config)\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 101,
        "context": "        \"\"\"TC-LAYOUT-006: 驗證注音邊界框屬性\"\"\"\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 104,
        "context": "        config = VideoConfig(letters=\"I i\", word_en=\"Ice\", word_zh=\"冰\")\n        result = compute_layout_bboxes(config)\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 118,
        "context": "        \"\"\"TC-LAYOUT-007: 驗證計時器可見時的佈局\"\"\"\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 121,
        "context": "        config = VideoConfig(letters=\"A a\", word_en=\"A\", word_zh=\"A\")\n        result = compute_layout_bboxes(config, timer_visible=True)\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 129,
        "context": "        \"\"\"TC-LAYOUT-008: 驗證計時器隱藏時的佈局\"\"\"\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 132,
        "context": "        config = VideoConfig(letters=\"A a\", word_en=\"A\", word_zh=\"A\")\n        result = compute_layout_bboxes(config, timer_visible=False)\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 138,
        "context": "        \"\"\"TC-LAYOUT-009: 驗證進度條 Y 座標\"\"\"\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 141,
        "context": "        config = VideoConfig(letters=\"A a\", word_en=\"A\", word_zh=\"A\")\n        result = compute_layout_bboxes(config, progress_bar=True)\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 154,
        "context": "        import time\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 159,
        "context": "        start = time.perf_counter()\n        result = compute_layout_bboxes(config)\n        elapsed = (time.perf_counter() - start) * 1000"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 168,
        "context": "        import time\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 177,
        "context": "        start = time.perf_counter()\n        result = compute_layout_bboxes(config)\n        elapsed = (time.perf_counter() - start) * 1000"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 190,
        "context": "        \"\"\"TC-LAYOUT-012: 驗證單個中文字\"\"\"\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 193,
        "context": "        config = VideoConfig(letters=\"A\", word_en=\"A\", word_zh=\"冰\")\n        result = compute_layout_bboxes(config)\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 200,
        "context": "        \"\"\"TC-LAYOUT-013: 驗證長文字\"\"\"\n        from spellvid.domain.layout import compute_layout_bboxes\n"
      },
      {
        "filepath": "tests/unit/domain/test_layout.py",
        "line_number": 207,
        "context": "        )\n        result = compute_layout_bboxes(config)\n"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 16,
        "context": "# Domain layer imports\nfrom spellvid.domain.layout import compute_layout_bboxes\nfrom spellvid.domain.timing import calculate_timeline"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 72,
        "context": "    # Phase 1: Domain 層計算(不依賴外部資源)\n    layout_result = compute_layout_bboxes(config)\n"
      },
      {
        "filepath": "spellvid/domain/layout.py",
        "line_number": 13,
        "context": "使用:\n    from spellvid.domain.layout import compute_layout_bboxes\n    from spellvid.shared.types import VideoConfig"
      },
      {
        "filepath": "spellvid/domain/layout.py",
        "line_number": 17,
        "context": "    config = VideoConfig(letters=\"I i\", word_en=\"Ice\", word_zh=\"冰\")\n    result = compute_layout_bboxes(config)\n    print(result.letters.x, result.word_zh.x)"
      },
      {
        "filepath": "spellvid/domain/layout.py",
        "line_number": 78,
        "context": "        Returns:\n            與 compute_layout_bboxes 原本回傳格式相同的字典\n        \"\"\""
      },
      {
        "filepath": "spellvid/domain/layout.py",
        "line_number": 120,
        "context": "\ndef compute_layout_bboxes(\n    config: VideoConfig,"
      }
    ],
    "call_count": 97,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_make_fixed_letter_clip",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1404,
        "context": "\ndef _make_fixed_letter_clip(\n    letter: str,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1404,
        "context": "\ndef _make_fixed_letter_clip(\n    letter: str,"
      }
    ],
    "call_count": 2,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "check_assets",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1427,
        "context": "\ndef check_assets(item: Dict[str, Any]) -> Dict[str, Any]:\n    res: Dict[str, Any] = {"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3683,
        "context": "    'compute_layout_bboxes',\n    'check_assets',\n    'synthesize_beeps',"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1427,
        "context": "\ndef check_assets(item: Dict[str, Any]) -> Dict[str, Any]:\n    res: Dict[str, Any] = {"
      },
      {
        "filepath": "tests/test_image_inclusion.py",
        "line_number": 70,
        "context": "\n    # Confirm check_assets reports the image exists\n    assets = utils.check_assets(item)"
      },
      {
        "filepath": "tests/test_image_inclusion.py",
        "line_number": 71,
        "context": "    # Confirm check_assets reports the image exists\n    assets = utils.check_assets(item)\n    assert assets[\"image_exists\"] is True"
      },
      {
        "filepath": "tests/test_integration.py",
        "line_number": 16,
        "context": "def test_asset_check_and_fallback(tmp_path):\n    \"\"\"當圖片或音訊資源不存在時，check_assets 要回傳 False。\n"
      },
      {
        "filepath": "tests/test_integration.py",
        "line_number": 27,
        "context": "    }\n    res = utils.check_assets(item)\n    assert res[\"image_exists\"] is False"
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 37,
        "context": "    The test will be skipped if MoviePy isn't available when use_moviepy=True.\n    For the non-moviepy stub path, we assert that check_assets reports the\n    music file presence and that render_video_stub returns ok status."
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 176,
        "context": "        assert res.get(\"status\") == \"ok\"\n        # check_assets should still report music exists based on path\n        assets = utils.check_assets(item)"
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 177,
        "context": "        # check_assets should still report music exists based on path\n        assets = utils.check_assets(item)\n        # If the asset file does not actually exist in repo, it's okay;"
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 179,
        "context": "        # If the asset file does not actually exist in repo, it's okay;\n        # the test asserts that check_assets matches the filesystem.\n        assert assets[\"music_exists\"] == os.path.isfile("
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 40,
        "context": "\ndef test_check_assets_available():\n    \"\"\"確認 check_assets 函數可以 import\"\"\""
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 41,
        "context": "def test_check_assets_available():\n    \"\"\"確認 check_assets 函數可以 import\"\"\"\n    with warnings.catch_warnings(record=True):"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 44,
        "context": "        warnings.simplefilter(\"always\")\n        from spellvid.utils import check_assets\n"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 47,
        "context": "        # 檢查函數可呼叫\n        assert callable(check_assets), (\n            \"check_assets should be callable\""
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 48,
        "context": "        assert callable(check_assets), (\n            \"check_assets should be callable\"\n        )"
      },
      {
        "filepath": "spellvid/application/resource_checker.py",
        "line_number": 6,
        "context": "主要功能:\n- check_assets(): 檢查單支視頻的資源檔案\n- prepare_entry_context(): 準備片頭資源資訊"
      },
      {
        "filepath": "spellvid/application/resource_checker.py",
        "line_number": 16,
        "context": "\ndef check_assets(config: VideoConfig) -> Dict[str, Any]:\n    \"\"\"檢查視頻資源檔案是否存在"
      },
      {
        "filepath": "spellvid/application/resource_checker.py",
        "line_number": 36,
        "context": "        ... )\n        >>> result = check_assets(config)\n        >>> result[\"image\"][\"exists\"]"
      },
      {
        "filepath": "spellvid/cli/commands.py",
        "line_number": 16,
        "context": "from ..application.batch_service import render_batch\nfrom ..application.resource_checker import check_assets\n"
      },
      {
        "filepath": "spellvid/cli/commands.py",
        "line_number": 50,
        "context": "        # 檢查資源 (dry-run 或實際渲染都需要)\n        assets_result = check_assets(config)\n"
      },
      {
        "filepath": "spellvid/cli/commands.py",
        "line_number": 161,
        "context": "        for i, config in enumerate(configs):\n            assets_result = check_assets(config)\n            image_ok = assets_result.get(\"image\", {}).get(\"exists\")"
      }
    ],
    "call_count": 22,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "synthesize_beeps",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1461,
        "context": "\ndef synthesize_beeps(duration_sec: int = 3, rate_hz: int = 1) -> bytes:\n    \"\"\"Return a stub bytes object representing beep audio."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3684,
        "context": "    'check_assets',\n    'synthesize_beeps',\n    # Constants - Canvas"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1461,
        "context": "\ndef synthesize_beeps(duration_sec: int = 3, rate_hz: int = 1) -> bytes:\n    \"\"\"Return a stub bytes object representing beep audio."
      },
      {
        "filepath": "tests/test_zhuyin.py",
        "line_number": 59,
        "context": "def test_beep_stub():\n    \"\"\"synthesize_beeps 應回傳 bytes，作為 beep 音的簡易替代物。\n"
      },
      {
        "filepath": "tests/test_zhuyin.py",
        "line_number": 63,
        "context": "    \"\"\"\n    b = utils.synthesize_beeps(3, 1)\n    assert isinstance(b, (bytes, bytearray)) and len(b) > 0"
      }
    ],
    "call_count": 5,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_create_placeholder_mp4_with_ffmpeg",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1469,
        "context": "\ndef _create_placeholder_mp4_with_ffmpeg(out_path: str) -> bool:\n    \"\"\"Create a tiny valid mp4 using ffmpeg if available."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1700,
        "context": "    os.makedirs(os.path.dirname(out_path), exist_ok=True)\n    created = _create_placeholder_mp4_with_ffmpeg(out_path)\n    if not created:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1469,
        "context": "\ndef _create_placeholder_mp4_with_ffmpeg(out_path: str) -> bool:\n    \"\"\"Create a tiny valid mp4 using ffmpeg if available."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1700,
        "context": "    os.makedirs(os.path.dirname(out_path), exist_ok=True)\n    created = _create_placeholder_mp4_with_ffmpeg(out_path)\n    if not created:"
      },
      {
        "filepath": "tests/test_video_inclusion.py",
        "line_number": 15,
        "context": "    mp4_path = tmp_path / \"bg.mp4\"\n    created = utils._create_placeholder_mp4_with_ffmpeg(str(mp4_path))\n    if not created:"
      },
      {
        "filepath": "tests/test_video_mode.py",
        "line_number": 16,
        "context": "    mp4_path = tmp_path / \"bg.mp4\"\n    created = utils._create_placeholder_mp4_with_ffmpeg(str(mp4_path))\n    if not created:"
      },
      {
        "filepath": "tests/test_video_mode.py",
        "line_number": 46,
        "context": "    mp4_path = tmp_path / \"bg.mp4\"\n    created = utils._create_placeholder_mp4_with_ffmpeg(str(mp4_path))\n    if not created:"
      },
      {
        "filepath": "tests/test_video_mode.py",
        "line_number": 76,
        "context": "    mp4_path = tmp_path / \"bg.mp4\"\n    created = utils._create_placeholder_mp4_with_ffmpeg(str(mp4_path))\n    if not created:"
      },
      {
        "filepath": "tests/test_video_overlap.py",
        "line_number": 13,
        "context": "    bg_mp4 = tmp_path / \"bg.mp4\"\n    utils._create_placeholder_mp4_with_ffmpeg(str(bg_mp4))\n"
      }
    ],
    "call_count": 9,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "render_video_stub",
    "category": "production",
    "references": [
      {
        "filepath": "scripts/render_example.py",
        "line_number": 1,
        "context": "\"\"\"Small runner to call spellvid.render_video_stub.\n"
      },
      {
        "filepath": "scripts/render_example.py",
        "line_number": 5,
        "context": "\"\"\"\nfrom spellvid.utils import render_video_stub\nimport argparse"
      },
      {
        "filepath": "scripts/render_example.py",
        "line_number": 199,
        "context": "            print('rendering ->', outp)\n            res = render_video_stub(\n                item,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1520,
        "context": "\ndef render_video_stub(\n    item: Dict[str, Any],"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3680,
        "context": "    # Core rendering functions\n    'render_video_stub',\n    'render_video_moviepy',"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1520,
        "context": "\ndef render_video_stub(\n    item: Dict[str, Any],"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 42,
        "context": "\n    res = utils.render_video_stub(item, \"out/ending_stub.mp4\", dry_run=True)\n    ending_info = res[\"ending_info\"]"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 161,
        "context": "@pytest.mark.skipif(not ENDING_ASSET.exists(), reason=\"缺少 assets/ending.mp4\")\ndef test_render_video_stub_with_skip_ending_true():\n    \"\"\"T004: 測試 skip_ending=True 時不添加片尾影片。\"\"\""
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 173,
        "context": "\n    res = utils.render_video_stub(\n        item, \"out/test_skip.mp4\", dry_run=True, skip_ending=True"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 193,
        "context": "@pytest.mark.skipif(not ENDING_ASSET.exists(), reason=\"缺少 assets/ending.mp4\")\ndef test_render_video_stub_with_skip_ending_false():\n    \"\"\"T005: 測試 skip_ending=False (預設) 時添加片尾影片，確保向後兼容。\"\"\""
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 206,
        "context": "    # 測試明確傳入 skip_ending=False\n    res1 = utils.render_video_stub(\n        item, \"out/test_with_ending.mp4\", dry_run=True, skip_ending=False"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 212,
        "context": "    # 測試預設行為（不傳入 skip_ending 參數）\n    res2 = utils.render_video_stub(item, \"out/test_default.mp4\", dry_run=True)\n    assert res2[\"ending_duration_sec\"] > 0.1, \"預設應該包含片尾（向後兼容）\""
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 123,
        "context": "\n    res = utils.render_video_stub(item, \"out/entry_stub.mp4\", dry_run=True)\n    entry_info = res[\"entry_info\"]"
      },
      {
        "filepath": "tests/test_letters_images.py",
        "line_number": 57,
        "context": "\n    res = utils.render_video_stub(item, str(out_path), dry_run=True)\n    captured = capsys.readouterr()"
      },
      {
        "filepath": "tests/test_letters_images.py",
        "line_number": 81,
        "context": "    assert letters_box.get(\"mode\") == \"text\"\n    res = utils.render_video_stub(item, str(tmp_path / \"text.mp4\"), dry_run=True)\n    assert res.get(\"letters_mode\") == \"text\""
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 38,
        "context": "    For the non-moviepy stub path, we assert that check_assets reports the\n    music file presence and that render_video_stub returns ok status.\n    \"\"\""
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 172,
        "context": "        # Use stub renderer path\n        res = utils.render_video_stub(\n            item, str(out_mp4), dry_run=False, use_moviepy=False"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 73,
        "context": "\n    res = sv_utils.render_video_stub(\n        item, out, dry_run=False, use_moviepy=True)"
      },
      {
        "filepath": "tests/contract/test_reexport_layer_contract.py",
        "line_number": 291,
        "context": "    確保常見的舊 import 路徑仍然有效:\n    - from spellvid.utils import render_video_stub\n    - from spellvid.utils import _make_text_imageclip"
      },
      {
        "filepath": "tests/contract/test_reexport_layer_contract.py",
        "line_number": 305,
        "context": "    critical_imports = [\n        \"render_video_stub\",  # 最常用的入口函數\n        # 其他關鍵函數會在遷移完成後補充"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 9,
        "context": "\ndef test_render_video_stub_available():\n    \"\"\"確認 render_video_stub 函數可以 import\"\"\""
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 10,
        "context": "def test_render_video_stub_available():\n    \"\"\"確認 render_video_stub 函數可以 import\"\"\"\n    with warnings.catch_warnings(record=True) as w:"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 13,
        "context": "        warnings.simplefilter(\"always\")\n        from spellvid.utils import render_video_stub\n"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 16,
        "context": "        # 檢查函數可呼叫\n        assert callable(render_video_stub), (\n            \"render_video_stub should be callable\""
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 17,
        "context": "        assert callable(render_video_stub), (\n            \"render_video_stub should be callable\"\n        )"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 124,
        "context": "        # Try importing a specific item to potentially trigger warning\n        from spellvid.utils import render_video_stub  # noqa: F401\n"
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 159,
        "context": "        all_list = utils.__all__\n        assert 'render_video_stub' in all_list, (\n            \"__all__ should include 'render_video_stub'\""
      },
      {
        "filepath": "tests/unit/test_utils_reexport.py",
        "line_number": 160,
        "context": "        assert 'render_video_stub' in all_list, (\n            \"__all__ should include 'render_video_stub'\"\n        )"
      }
    ],
    "call_count": 28,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_apply_fadeout",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1730,
        "context": "\ndef _apply_fadeout(clip, duration: float = None):\n    \"\"\"Apply fade-out effect to video clip (both video and audio)."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3250,
        "context": "    # Note: ending.mp4 will not have additional fade-out (D8 decision)\n    main_clip = _apply_fadeout(main_clip, duration=FADE_OUT_DURATION)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1730,
        "context": "\ndef _apply_fadeout(clip, duration: float = None):\n    \"\"\"Apply fade-out effect to video clip (both video and audio)."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3250,
        "context": "    # Note: ending.mp4 will not have additional fade-out (D8 decision)\n    main_clip = _apply_fadeout(main_clip, duration=FADE_OUT_DURATION)\n"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 3,
        "context": "\nTests the _apply_fadeout and _apply_fadein functions for correctness,\nincluding:"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 12,
        "context": "from spellvid.utils import (\n    _apply_fadeout,\n    _apply_fadein,"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 29,
        "context": "    # Apply fade-out\n    result = _apply_fadeout(clip, duration=3.0)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 54,
        "context": "    \n    result = _apply_fadeout(clip, duration=3.0)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 90,
        "context": "    # Apply fade-out\n    result = _apply_fadeout(clip, duration=3.0)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 109,
        "context": "    \n    result = _apply_fadeout(clip, duration=3.0)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 239,
        "context": "    # Apply 2-second fade-out\n    result = _apply_fadeout(clip, duration=2.0)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 271,
        "context": "    # Apply fade-out with duration=None (should use FADE_OUT_DURATION)\n    result = _apply_fadeout(clip, duration=None)\n    "
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 94,
        "context": "\n    def test_apply_fadeout_returns_clip(self):\n        \"\"\"TC-CONTRACT-006: 驗證 apply_fadeout 回傳值\"\"\""
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 20,
        "context": "\n    def test_apply_fadeout_basic(self):\n        \"\"\"TC-EFFECT-001: 驗證基本淡出參數計算"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 39,
        "context": "\n    def test_apply_fadeout_zero_duration(self):\n        \"\"\"TC-EFFECT-002: 驗證零淡出持續時間"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 55,
        "context": "\n    def test_apply_fadeout_exceeds_duration(self):\n        \"\"\"TC-EFFECT-003: 驗證淡出時間過長的處理"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 72,
        "context": "\n    def test_apply_fadeout_short_clip(self):\n        \"\"\"TC-EFFECT-004: 驗證短視頻的淡出"
      }
    ],
    "call_count": 17,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_apply_fadein",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1774,
        "context": "\ndef _apply_fadein(clip, duration: float = None, apply_audio: bool = False):\n    \"\"\"Apply fade-in effect to video clip."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1894,
        "context": "                    # Subsequent videos: apply fade-in\n                    clip_with_fadein = _apply_fadein(\n                        clip,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1774,
        "context": "\ndef _apply_fadein(clip, duration: float = None, apply_audio: bool = False):\n    \"\"\"Apply fade-in effect to video clip."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1894,
        "context": "                    # Subsequent videos: apply fade-in\n                    clip_with_fadein = _apply_fadein(\n                        clip,"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 3,
        "context": "\nTests the _apply_fadeout and _apply_fadein functions for correctness,\nincluding:"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 13,
        "context": "    _apply_fadeout,\n    _apply_fadein,\n    _HAS_MOVIEPY,"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 125,
        "context": "    # Apply fade-in\n    result = _apply_fadein(clip, duration=1.0, apply_audio=False)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 150,
        "context": "    \n    result = _apply_fadein(clip, duration=1.0, apply_audio=False)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 185,
        "context": "    # Apply fade-in with audio disabled\n    result = _apply_fadein(clip, duration=1.0, apply_audio=False)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 220,
        "context": "    # Apply fade-in with audio enabled\n    result = _apply_fadein(clip, duration=1.0, apply_audio=True)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 255,
        "context": "    # Apply 1.5-second fade-in\n    result = _apply_fadein(clip, duration=1.5, apply_audio=False)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 287,
        "context": "    # Apply fade-in with duration=None (should use FADE_IN_DURATION)\n    result = _apply_fadein(clip, duration=None, apply_audio=False)\n    "
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 93,
        "context": "\n    def test_apply_fadein_basic(self):\n        \"\"\"TC-EFFECT-005: 驗證基本淡入參數計算"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 107,
        "context": "\n    def test_apply_fadein_zero_duration(self):\n        \"\"\"TC-EFFECT-006: 驗證零淡入持續時間"
      }
    ],
    "call_count": 14,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "concatenate_videos_with_transitions",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1819,
        "context": "\ndef concatenate_videos_with_transitions(\n    video_paths: List[str],"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1819,
        "context": "\ndef concatenate_videos_with_transitions(\n    video_paths: List[str],"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 3,
        "context": "\nTests the concatenate_videos_with_transitions function and batch CLI mode\nwith --out-file parameter."
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 10,
        "context": "from spellvid.utils import (\n    concatenate_videos_with_transitions,\n    _HAS_MOVIEPY,"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 60,
        "context": "    # Concatenate\n    result = concatenate_videos_with_transitions(\n        [str(video1), str(video2)],"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 93,
        "context": "    # Concatenate\n    result = concatenate_videos_with_transitions(\n        videos,"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 123,
        "context": "    # Concatenate\n    result = concatenate_videos_with_transitions(\n        [str(video1), str(video2)],"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 142,
        "context": "    \"\"\"Test that empty video list returns error.\"\"\"\n    result = concatenate_videos_with_transitions(\n        [],"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 155,
        "context": "\n    result = concatenate_videos_with_transitions(\n        [\"/nonexistent/video1.mp4\", \"/nonexistent/video2.mp4\"],"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 172,
        "context": "    # Concatenate single video\n    result = concatenate_videos_with_transitions(\n        [str(video1)],"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 194,
        "context": "    # Use custom 0.5s fade-in\n    result = concatenate_videos_with_transitions(\n        [str(video1), str(video2)],"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 214,
        "context": "    # Pass None to use default\n    result = concatenate_videos_with_transitions(\n        [str(video1), str(video2)],"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 234,
        "context": "\n    result = concatenate_videos_with_transitions(\n        [str(video1), str(video2)],"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 266,
        "context": "\n    result = concatenate_videos_with_transitions(\n        [str(video1)],"
      }
    ],
    "call_count": 14,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "render_video_moviepy",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 101,
        "context": "\n# Main background color for render_video_moviepy (RGB tuple).\n# Change this constant to control the default full-screen background color."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1546,
        "context": "    if use_moviepy and _HAS_MOVIEPY:\n        return render_video_moviepy(\n            item, out_path, dry_run=dry_run, skip_ending=skip_ending"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1941,
        "context": "\n            # Use ffmpeg settings similar to render_video_moviepy\n            ffmpeg_exe = os.environ.get(\"IMAGEIO_FFMPEG_EXE\")"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1996,
        "context": "\ndef render_video_moviepy(\n    item: Dict[str, Any],"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3681,
        "context": "    'render_video_stub',\n    'render_video_moviepy',\n    'compute_layout_bboxes',"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 101,
        "context": "\n# Main background color for render_video_moviepy (RGB tuple).\n# Change this constant to control the default full-screen background color."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1546,
        "context": "    if use_moviepy and _HAS_MOVIEPY:\n        return render_video_moviepy(\n            item, out_path, dry_run=dry_run, skip_ending=skip_ending"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1941,
        "context": "\n            # Use ffmpeg settings similar to render_video_moviepy\n            ffmpeg_exe = os.environ.get(\"IMAGEIO_FFMPEG_EXE\")"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1996,
        "context": "\ndef render_video_moviepy(\n    item: Dict[str, Any],"
      },
      {
        "filepath": "tests/test_countdown.py",
        "line_number": 100,
        "context": "    out_path = tmp_path / \"hide_timer.mp4\"\n    res = utils.render_video_moviepy(item, str(out_path), dry_run=True)\n"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 85,
        "context": "    out_path = tmp_path / \"ending_moviepy.mp4\"\n    res = utils.render_video_moviepy(item, str(out_path), dry_run=False)\n    ending_info = res[\"ending_info\"]"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 128,
        "context": "    out_path = tmp_path / \"ending_fullscreen.mp4\"\n    res = utils.render_video_moviepy(item, str(out_path), dry_run=False)\n    ending_info = res[\"ending_info\"]"
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 195,
        "context": "    try:\n        res = utils.render_video_moviepy(item, str(out_path), dry_run=False)\n        snapshot_path = res.get(\"snapshot\")"
      },
      {
        "filepath": "tests/test_image_inclusion.py",
        "line_number": 30,
        "context": "\n    This test intentionally exercises `render_video_moviepy` and will be\n    skipped if MoviePy is not available. The current repository state"
      },
      {
        "filepath": "tests/test_image_inclusion.py",
        "line_number": 56,
        "context": "    # Render real moviepy video; this may raise if ffmpeg not configured\n    res = utils.render_video_moviepy(item, str(out_mp4), dry_run=False)\n    assert res.get(\"status\") == \"ok\""
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 85,
        "context": "        # call real renderer\n        res = utils.render_video_moviepy(item, str(out_mp4), dry_run=False)\n        assert res.get(\"status\") == \"ok\""
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 154,
        "context": "    out = tmp_path / \"progress.mp4\"\n    res = utils.render_video_moviepy(item, str(out), dry_run=False)\n    segments = res.get(\"progress_bar_segments\")"
      },
      {
        "filepath": "tests/test_video_arm_sizing.py",
        "line_number": 39,
        "context": "        try:\n            result = utils.render_video_moviepy(item, out, dry_run=False)\n        finally:"
      },
      {
        "filepath": "tests/test_video_arm_sizing.py",
        "line_number": 101,
        "context": "        try:\n            result = utils.render_video_moviepy(item, out, dry_run=False)\n        finally:"
      },
      {
        "filepath": "tests/test_video_inclusion.py",
        "line_number": 30,
        "context": "    out_mp4 = tmp_path / \"out.mp4\"\n    res = utils.render_video_moviepy(item, str(out_mp4), dry_run=False)\n    assert res.get(\"status\") == \"ok\""
      },
      {
        "filepath": "tests/test_video_mode.py",
        "line_number": 32,
        "context": "    out_mp4 = tmp_path / \"out_fit.mp4\"\n    res = utils.render_video_moviepy(item, str(out_mp4), dry_run=False)\n    assert res.get(\"status\") == \"ok\""
      },
      {
        "filepath": "tests/test_video_mode.py",
        "line_number": 62,
        "context": "    out_mp4 = tmp_path / \"out_cover.mp4\"\n    res = utils.render_video_moviepy(item, str(out_mp4), dry_run=False)\n    assert res.get(\"status\") == \"ok\""
      },
      {
        "filepath": "tests/test_video_mode.py",
        "line_number": 92,
        "context": "    out_mp4 = tmp_path / \"out_default.mp4\"\n    res = utils.render_video_moviepy(item, str(out_mp4), dry_run=False)\n    assert res.get(\"status\") == \"ok\""
      },
      {
        "filepath": "tests/test_video_overlap.py",
        "line_number": 62,
        "context": "    _os.environ[\"SPELLVID_DEBUG_SKIP_WRITE\"] = \"1\"\n    result = utils.render_video_moviepy(item, str(out), dry_run=False)\n    _os.environ.pop(\"SPELLVID_DEBUG_SKIP_WRITE\", None)"
      }
    ],
    "call_count": 24,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "make_beep",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3216,
        "context": "    # using the precomputed schedule from timer visibility planning.\n    def make_beep(start_sec):\n        freq = 1000.0"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3236,
        "context": "        try:\n            audio_clips.append(make_beep(start))\n        except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3216,
        "context": "    # using the precomputed schedule from timer visibility planning.\n    def make_beep(start_sec):\n        freq = 1000.0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3236,
        "context": "        try:\n            audio_clips.append(make_beep(start))\n        except Exception:"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_ensure_dimensions",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3258,
        "context": "\n    def _ensure_dimensions(clip):\n        try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3338,
        "context": "            cleanup_clips.append(entry_clip_obj)\n            entry_clip_obj = _ensure_dimensions(entry_clip_obj)\n            entry_loaded = True"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3373,
        "context": "                            cleanup_clips.append(entry_clip_obj)\n                            entry_clip_obj = _ensure_dimensions(entry_clip_obj)\n                            entry_ctx[\"path\"] = fallback"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3412,
        "context": "                hold_clip = hold_source.with_duration(entry_hold)\n                hold_clip = _ensure_dimensions(hold_clip)\n            else:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3440,
        "context": "                _auto_letterbox_crop,\n                _ensure_dimensions,\n                _ensure_fullscreen_cover,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3258,
        "context": "\n    def _ensure_dimensions(clip):\n        try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3338,
        "context": "            cleanup_clips.append(entry_clip_obj)\n            entry_clip_obj = _ensure_dimensions(entry_clip_obj)\n            entry_loaded = True"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3373,
        "context": "                            cleanup_clips.append(entry_clip_obj)\n                            entry_clip_obj = _ensure_dimensions(entry_clip_obj)\n                            entry_ctx[\"path\"] = fallback"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3412,
        "context": "                hold_clip = hold_source.with_duration(entry_hold)\n                hold_clip = _ensure_dimensions(hold_clip)\n            else:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3440,
        "context": "                _auto_letterbox_crop,\n                _ensure_dimensions,\n                _ensure_fullscreen_cover,"
      }
    ],
    "call_count": 10,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "_ensure_fullscreen_cover",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3272,
        "context": "\n    def _ensure_fullscreen_cover(clip):\n        try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3441,
        "context": "                _ensure_dimensions,\n                _ensure_fullscreen_cover,\n            )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3272,
        "context": "\n    def _ensure_fullscreen_cover(clip):\n        try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3441,
        "context": "                _ensure_dimensions,\n                _ensure_fullscreen_cover,\n            )"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "_auto_letterbox_crop",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3290,
        "context": "\n    def _auto_letterbox_crop(clip):\n        try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3439,
        "context": "            transformers = (\n                _auto_letterbox_crop,\n                _ensure_dimensions,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3290,
        "context": "\n    def _auto_letterbox_crop(clip):\n        try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3439,
        "context": "            transformers = (\n                _auto_letterbox_crop,\n                _ensure_dimensions,"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  },
  {
    "function_name": "__init__",
    "category": "production",
    "references": [
      {
        "filepath": "scripts/analyze_function_usage.py",
        "line_number": 23,
        "context": "\n    def __init__(self, filepath: str, line_number: int, context: str):\n        self.filepath = filepath"
      },
      {
        "filepath": "scripts/analyze_function_usage.py",
        "line_number": 39,
        "context": "\n    def __init__(self, function_name: str):\n        self.function_name = function_name"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 595,
        "context": "    try:\n        params = _inspect.signature(_mpy.ImageClip.__init__).parameters\n        if \"is_mask\" in params:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 875,
        "context": "    class _SimpleImageClip:\n        def __init__(self, arr, duration=None):\n            self._arr = arr"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 595,
        "context": "    try:\n        params = _inspect.signature(_mpy.ImageClip.__init__).parameters\n        if \"is_mask\" in params:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 875,
        "context": "    class _SimpleImageClip:\n        def __init__(self, arr, duration=None):\n            self._arr = arr"
      },
      {
        "filepath": "spellvid/shared/validation.py",
        "line_number": 82,
        "context": "\n    def __init__(self, errors: List[str]):\n        self.errors = errors"
      },
      {
        "filepath": "spellvid/shared/validation.py",
        "line_number": 86,
        "context": "            \"\\n\".join(f\"  - {err}\" for err in errors)\n        super().__init__(message)\n"
      },
      {
        "filepath": "spellvid/infrastructure/media/ffmpeg_wrapper.py",
        "line_number": 26,
        "context": "\n    def __init__(self):\n        \"\"\"初始化 FFmpegWrapper 並確保 FFmpeg 可用\"\"\""
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 50,
        "context": "\n    def __init__(self):\n        \"\"\"初始化 MoviePy 適配器"
      }
    ],
    "call_count": 10,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "get_frame",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 867,
        "context": "    # tiny fallback object that exposes the minimal API used by tests\n    # (get_frame, w, h, size, with_duration).\n    if _mpy is not None:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 882,
        "context": "\n        def get_frame(self, t=0):\n            return self._arr"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3302,
        "context": "                try:\n                    frame = clip.get_frame(t)\n                    if frame is not None:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3409,
        "context": "                except Exception:\n                    frame = entry_clip_obj.get_frame(last_t)\n                    hold_source = _mpy.ImageClip(frame)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 867,
        "context": "    # tiny fallback object that exposes the minimal API used by tests\n    # (get_frame, w, h, size, with_duration).\n    if _mpy is not None:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 882,
        "context": "\n        def get_frame(self, t=0):\n            return self._arr"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3302,
        "context": "                try:\n                    frame = clip.get_frame(t)\n                    if frame is not None:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3409,
        "context": "                except Exception:\n                    frame = entry_clip_obj.get_frame(last_t)\n                    hold_source = _mpy.ImageClip(frame)"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 246,
        "context": "    # First frame should be bright (no fade-in on first video)\n    first_frame = final_clip.get_frame(0.0)\n    assert first_frame.mean() > 200  # Should be bright white"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 251,
        "context": "    # At 3.0s (start of second video), there should be fade-in effect\n    second_video_start = final_clip.get_frame(3.1)\n    # Note: Due to fade-in, this might be slightly darker, but testing is complex"
      },
      {
        "filepath": "tests/test_countdown.py",
        "line_number": 70,
        "context": "    try:\n        frame = clip.get_frame(0)\n    except Exception as e:"
      },
      {
        "filepath": "tests/test_image_inclusion.py",
        "line_number": 86,
        "context": "    try:\n        frame = clip.get_frame(0)\n    except Exception:"
      },
      {
        "filepath": "tests/test_image_inclusion.py",
        "line_number": 134,
        "context": "        try:\n            direct = ImageClipCtor(str(img_path)).get_frame(0)\n            direct_avg = np.mean("
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 72,
        "context": "    try:\n        frame = clip.get_frame(0)\n    except Exception as e:"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 155,
        "context": "    try:\n        frame = clip.get_frame(0)\n    except Exception as e:"
      },
      {
        "filepath": "tests/test_reveal_stable_positions.py",
        "line_number": 64,
        "context": "    )\n    fa = a.get_frame(0)\n    left_a = _leftmost_alpha_x(fa)"
      },
      {
        "filepath": "tests/test_reveal_stable_positions.py",
        "line_number": 76,
        "context": "    )\n    fb = b.get_frame(0)\n    left_b = _leftmost_alpha_x(fb)"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 50,
        "context": "    try:\n        frame = clip.get_frame(0)\n    except Exception:"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 88,
        "context": "        clip = mpy.VideoFileClip(res[\"out\"])\n        frame = clip.get_frame(0)\n    except Exception:"
      },
      {
        "filepath": "tests/test_reveal_underline.py",
        "line_number": 151,
        "context": "    try:\n        frame = clip.get_frame(0)\n    except Exception:"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 37,
        "context": "    # Frame at 7.0s: normal brightness (before fade-out starts)\n    frame_before = result.get_frame(7.0)\n    # Frame at 9.9s: should be nearly black (at end of fade-out)"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 39,
        "context": "    # Frame at 9.9s: should be nearly black (at end of fade-out)\n    frame_end = result.get_frame(9.9)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 133,
        "context": "    # Frame at 0.0s: should be black (start of fade-in)\n    frame_start = result.get_frame(0.0)\n    # Frame at 2.0s: should be normal brightness (after fade-in)"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 135,
        "context": "    # Frame at 2.0s: should be normal brightness (after fade-in)\n    frame_after = result.get_frame(2.0)\n    "
      }
    ],
    "call_count": 24,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "with_duration",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 604,
        "context": "        mask_kwargs[\"ismask\"] = True\n    clip = _mpy.ImageClip(mask_arr, **mask_kwargs).with_duration(duration)\n    return clip"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 867,
        "context": "    # tiny fallback object that exposes the minimal API used by tests\n    # (get_frame, w, h, size, with_duration).\n    if _mpy is not None:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 871,
        "context": "        if duration is not None:\n            clip = clip.with_duration(duration)\n        return clip"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 885,
        "context": "\n        def with_duration(self, duration):\n            self._duration = duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2207,
        "context": "        _mpy.ColorClip(size=(1920, 1080), color=MAIN_BG_COLOR)\n        .with_duration(duration)\n    )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2271,
        "context": "                    pass\n                img_clip = _mpy.ImageClip(arr).with_duration(duration)\n                # position centered"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2471,
        "context": "                                            )\n                                            v_looped = v_concat.with_duration(\n                                                duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2485,
        "context": "                                                v_looped = (\n                                                    v_concat.with_duration(\n                                                        duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2526,
        "context": "                                                        v_cropped\n                                                        .with_duration(\n                                                            duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2532,
        "context": "                                        # Ultimate fallback: extend duration\n                                        v_looped = v_cropped.with_duration(\n                                            duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2538,
        "context": "                                if v_looped is None:\n                                    v_looped = v_cropped.with_duration(\n                                        duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2546,
        "context": "                                        v_cropped.subclip(0, duration)\n                                        .with_duration(\n                                            duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2553,
        "context": "                                        v_looped = (\n                                            v_cropped.with_duration(\n                                                duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2562,
        "context": "                                v_looped = (\n                                    v_cropped.with_duration(\n                                        duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2635,
        "context": "                            height=max(1, int(target_height)))\n                    clip_letter = clip_letter.with_duration(duration)\n                    clip_letter = clip_letter.with_position("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2944,
        "context": "            arr = _np.array(img)\n            txt_zh_clip = _mpy.ImageClip(arr).with_duration(duration)\n            pos_x = 1920 - 64 - txt_zh_clip.w"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2953,
        "context": "            )\n            t = t.with_position((1920 - 64 - t.w, 64)).with_duration(duration)\n            clips.append(t)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3065,
        "context": "                        rgba[..., 3] = 255\n                        ul_clip = _mpy.ImageClip(rgba).with_duration(duration)\n                        ul_clip = ul_clip.with_position((abs_x, abs_y))"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3072,
        "context": "                            ul_clip = _mpy.ColorClip(size=(w, h), color=(\n                                0, 0, 0)).with_duration(duration)\n                            ul_clip = ul_clip.with_position((abs_x, abs_y))"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3121,
        "context": "                clip = _mpy.ImageClip(\n                    color_slice.copy()).with_duration(seg_duration)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3140,
        "context": "    main_clip = _mpy.CompositeVideoClip(clips, size=(1920, 1080))\n    main_clip = main_clip.with_duration(duration)\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3186,
        "context": "                    else:\n                        # try with_duration as fallback\n                        try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3188,
        "context": "                        try:\n                            music = af.with_duration(duration)\n                        except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3194,
        "context": "                try:\n                    music = music.with_duration(duration)\n                except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3411,
        "context": "                    hold_source = _mpy.ImageClip(frame)\n                hold_clip = hold_source.with_duration(entry_hold)\n                hold_clip = _ensure_dimensions(hold_clip)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3416,
        "context": "                    size=(1920, 1080), color=(0, 0, 0)\n                ).with_duration(entry_hold)\n            cleanup_clips.append(hold_clip)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 604,
        "context": "        mask_kwargs[\"ismask\"] = True\n    clip = _mpy.ImageClip(mask_arr, **mask_kwargs).with_duration(duration)\n    return clip"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 867,
        "context": "    # tiny fallback object that exposes the minimal API used by tests\n    # (get_frame, w, h, size, with_duration).\n    if _mpy is not None:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 871,
        "context": "        if duration is not None:\n            clip = clip.with_duration(duration)\n        return clip"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 885,
        "context": "\n        def with_duration(self, duration):\n            self._duration = duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2207,
        "context": "        _mpy.ColorClip(size=(1920, 1080), color=MAIN_BG_COLOR)\n        .with_duration(duration)\n    )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2271,
        "context": "                    pass\n                img_clip = _mpy.ImageClip(arr).with_duration(duration)\n                # position centered"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2471,
        "context": "                                            )\n                                            v_looped = v_concat.with_duration(\n                                                duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2485,
        "context": "                                                v_looped = (\n                                                    v_concat.with_duration(\n                                                        duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2526,
        "context": "                                                        v_cropped\n                                                        .with_duration(\n                                                            duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2532,
        "context": "                                        # Ultimate fallback: extend duration\n                                        v_looped = v_cropped.with_duration(\n                                            duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2538,
        "context": "                                if v_looped is None:\n                                    v_looped = v_cropped.with_duration(\n                                        duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2546,
        "context": "                                        v_cropped.subclip(0, duration)\n                                        .with_duration(\n                                            duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2553,
        "context": "                                        v_looped = (\n                                            v_cropped.with_duration(\n                                                duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2562,
        "context": "                                v_looped = (\n                                    v_cropped.with_duration(\n                                        duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2635,
        "context": "                            height=max(1, int(target_height)))\n                    clip_letter = clip_letter.with_duration(duration)\n                    clip_letter = clip_letter.with_position("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2944,
        "context": "            arr = _np.array(img)\n            txt_zh_clip = _mpy.ImageClip(arr).with_duration(duration)\n            pos_x = 1920 - 64 - txt_zh_clip.w"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2953,
        "context": "            )\n            t = t.with_position((1920 - 64 - t.w, 64)).with_duration(duration)\n            clips.append(t)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3065,
        "context": "                        rgba[..., 3] = 255\n                        ul_clip = _mpy.ImageClip(rgba).with_duration(duration)\n                        ul_clip = ul_clip.with_position((abs_x, abs_y))"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3072,
        "context": "                            ul_clip = _mpy.ColorClip(size=(w, h), color=(\n                                0, 0, 0)).with_duration(duration)\n                            ul_clip = ul_clip.with_position((abs_x, abs_y))"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3121,
        "context": "                clip = _mpy.ImageClip(\n                    color_slice.copy()).with_duration(seg_duration)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3140,
        "context": "    main_clip = _mpy.CompositeVideoClip(clips, size=(1920, 1080))\n    main_clip = main_clip.with_duration(duration)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3186,
        "context": "                    else:\n                        # try with_duration as fallback\n                        try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3188,
        "context": "                        try:\n                            music = af.with_duration(duration)\n                        except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3194,
        "context": "                try:\n                    music = music.with_duration(duration)\n                except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3411,
        "context": "                    hold_source = _mpy.ImageClip(frame)\n                hold_clip = hold_source.with_duration(entry_hold)\n                hold_clip = _ensure_dimensions(hold_clip)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3416,
        "context": "                    size=(1920, 1080), color=(0, 0, 0)\n                ).with_duration(entry_hold)\n            cleanup_clips.append(hold_clip)"
      }
    ],
    "call_count": 52,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "duration",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 106,
        "context": "# Video transition effects constants\nFADE_OUT_DURATION = 3.0  # seconds - duration of fade to black at video end\nFADE_IN_DURATION = 1.0   # seconds - duration of fade from black at video start"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 107,
        "context": "FADE_OUT_DURATION = 3.0  # seconds - duration of fade to black at video end\nFADE_IN_DURATION = 1.0   # seconds - duration of fade from black at video start\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 167,
        "context": "\ndef _probe_media_duration(path: str) -> Optional[float]:\n    \"\"\"Best-effort probe for a media file duration in seconds.\"\"\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 168,
        "context": "def _probe_media_duration(path: str) -> Optional[float]:\n    \"\"\"Best-effort probe for a media file duration in seconds.\"\"\"\n    if not path or not os.path.isfile(path):"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 182,
        "context": "\n    duration: Optional[float] = None\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 188,
        "context": "            try:\n                raw = getattr(clip, \"duration\", None)\n                if raw is not None:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 190,
        "context": "                if raw is not None:\n                    duration = float(raw)\n            finally:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 197,
        "context": "        except Exception:\n            duration = None\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 199,
        "context": "\n    if duration is None:\n        candidates = ["
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 218,
        "context": "                \"-show_entries\",\n                \"format=duration\",\n                \"-of\","
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 227,
        "context": "                if text:\n                    duration = float(text)\n                    break"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 232,
        "context": "\n    if duration is not None and duration < 0:\n        duration = None"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 233,
        "context": "    if duration is not None and duration < 0:\n        duration = None\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 235,
        "context": "\n    _entry_probe_cache[cache_key] = (mtime, duration)\n    return duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 236,
        "context": "    _entry_probe_cache[cache_key] = (mtime, duration)\n    return duration\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 246,
        "context": "            \"exists\": False,\n            \"duration_sec\": 0.0,\n            \"hold_sec\": 0.0,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 255,
        "context": "    )\n    duration = _probe_media_duration(path) if exists else None\n    total_lead = (duration or 0.0) + hold"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 256,
        "context": "    duration = _probe_media_duration(path) if exists else None\n    total_lead = (duration or 0.0) + hold\n    return {"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 260,
        "context": "        \"exists\": bool(exists),\n        \"duration_sec\": duration,\n        \"hold_sec\": hold,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 274,
        "context": "            \"exists\": False,\n            \"duration_sec\": 0.0,\n            \"total_tail_sec\": 0.0,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 279,
        "context": "    exists = os.path.isfile(path)\n    duration = _probe_media_duration(path) if exists else None\n    total_tail = float(duration or 0.0) if duration else 0.0"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 280,
        "context": "    duration = _probe_media_duration(path) if exists else None\n    total_tail = float(duration or 0.0) if duration else 0.0\n    return {"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 284,
        "context": "        \"exists\": bool(exists),\n        \"duration_sec\": duration,\n        \"total_tail_sec\": total_tail,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 588,
        "context": "\ndef _make_progress_bar_mask(mask_slice: _np.ndarray, duration: float):\n    \"\"\"Create a MoviePy ImageClip mask from an alpha slice.\"\"\""
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 604,
        "context": "        mask_kwargs[\"ismask\"] = True\n    clip = _mpy.ImageClip(mask_arr, **mask_kwargs).with_duration(duration)\n    return clip"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 610,
        "context": "    countdown: float,\n    total_duration: float,\n    *,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 617,
        "context": "    countdown = float(max(0.0, countdown))\n    total_duration = float(max(total_duration, countdown))\n    if fps <= 0 or bar_width <= 0:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 624,
        "context": "                \"start\": 0.0,\n                \"end\": round(total_duration, 6),\n                \"width\": 0,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 685,
        "context": "            \"start\": round(float(countdown), 6),\n            \"end\": round(float(total_duration), 6),\n            \"width\": 0,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 800,
        "context": "    bg=None,\n    duration: float = None,\n    prefer_cjk: bool = False,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 867,
        "context": "    # tiny fallback object that exposes the minimal API used by tests\n    # (get_frame, w, h, size, with_duration).\n    if _mpy is not None:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 870,
        "context": "        clip = _mpy.ImageClip(arr)\n        if duration is not None:\n            clip = clip.with_duration(duration)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 871,
        "context": "        if duration is not None:\n            clip = clip.with_duration(duration)\n        return clip"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 875,
        "context": "    class _SimpleImageClip:\n        def __init__(self, arr, duration=None):\n            self._arr = arr"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 880,
        "context": "            self.size = (self.w, self.h)\n            self._duration = duration\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 885,
        "context": "\n        def with_duration(self, duration):\n            self._duration = duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 886,
        "context": "        def with_duration(self, duration):\n            self._duration = duration\n            return self"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 891,
        "context": "        @property\n        def duration(self):\n            return self._duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 892,
        "context": "        def duration(self):\n            return self._duration\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 894,
        "context": "\n    clip = _SimpleImageClip(arr, duration=duration)\n    return clip"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1409,
        "context": "    color=(0, 0, 0),\n    duration: float = None,\n    prefer_cjk: bool = False,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1420,
        "context": "        color=color,\n        duration=duration,\n        prefer_cjk=prefer_cjk,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1461,
        "context": "\ndef synthesize_beeps(duration_sec: int = 3, rate_hz: int = 1) -> bytes:\n    \"\"\"Return a stub bytes object representing beep audio."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1466,
        "context": "    \"\"\"\n    return b\"BEEP\" * max(1, duration_sec * rate_hz)\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1574,
        "context": "    entry_offset = float(entry_ctx.get(\"total_lead_sec\", 0.0))\n    entry_duration = float(entry_ctx.get(\"duration_sec\") or 0.0)\n    entry_hold = float(entry_ctx.get(\"hold_sec\", 0.0))"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1577,
        "context": "    entry_offset_runtime = entry_offset\n    entry_duration_runtime = entry_duration\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1580,
        "context": "    ending_ctx = _prepare_ending_context(item)\n    ending_duration_runtime = float(ending_ctx.get(\n        \"total_tail_sec\") or ending_ctx.get(\"duration_sec\") or 0.0)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1581,
        "context": "    ending_duration_runtime = float(ending_ctx.get(\n        \"total_tail_sec\") or ending_ctx.get(\"duration_sec\") or 0.0)\n    ending_offset_runtime = 0.0"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1590,
        "context": "    total_reveal_time = per * n_for_timing\n    main_duration = float(countdown + total_reveal_time + reveal_hold)\n    runtime_after_main = float(entry_offset_runtime + main_duration)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1591,
        "context": "    main_duration = float(countdown + total_reveal_time + reveal_hold)\n    runtime_after_main = float(entry_offset_runtime + main_duration)\n    total_duration_runtime = runtime_after_main"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1592,
        "context": "    runtime_after_main = float(entry_offset_runtime + main_duration)\n    total_duration_runtime = runtime_after_main\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1598,
        "context": "        progress_segments = _build_progress_bar_segments(\n            countdown, main_duration)\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1629,
        "context": "            timer_text = f\"{mm:02d}:{ss:02d}\"\n            timer_duration = float(\n                main_duration - i) if i == countdown else 1.0"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1630,
        "context": "            timer_duration = float(\n                main_duration - i) if i == countdown else 1.0\n            if timer_duration < 0:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1631,
        "context": "                main_duration - i) if i == countdown else 1.0\n            if timer_duration < 0:\n                timer_duration = 0.0"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1632,
        "context": "            if timer_duration < 0:\n                timer_duration = 0.0\n            entry = {"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1636,
        "context": "                \"text\": timer_text,\n                \"duration\": float(timer_duration),\n            }"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1642,
        "context": "            entry[\"timeline_end\"] = round(\n                entry[\"timeline_start\"] + entry[\"duration\"], 6\n            )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1652,
        "context": "    ending_offset_runtime = runtime_after_main\n    # Apply skip_ending logic: if skip_ending=True, set duration to 0\n    if skip_ending:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1654,
        "context": "    if skip_ending:\n        ending_duration_runtime = 0.0\n    elif not ending_ctx.get(\"enabled\", True) or not ending_ctx.get(\"exists\"):"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1656,
        "context": "    elif not ending_ctx.get(\"enabled\", True) or not ending_ctx.get(\"exists\"):\n        ending_duration_runtime = 0.0\n    total_duration_runtime = float("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1657,
        "context": "        ending_duration_runtime = 0.0\n    total_duration_runtime = float(\n        ending_offset_runtime + ending_duration_runtime)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1658,
        "context": "    total_duration_runtime = float(\n        ending_offset_runtime + ending_duration_runtime)\n    ending_runtime = dict(ending_ctx)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1662,
        "context": "    ending_runtime[\"error\"] = None\n    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1663,
        "context": "    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime\n    ending_runtime[\"size\"] = (1920, 1080) if ending_ctx.get(\"exists\") else None"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1691,
        "context": "            \"entry_offset_sec\": entry_offset_runtime,\n            \"entry_duration_sec\": entry_duration_runtime,\n            \"entry_hold_sec\": entry_hold,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1695,
        "context": "            \"ending_offset_sec\": ending_offset_runtime,\n            \"ending_duration_sec\": ending_duration_runtime,\n            \"total_duration_sec\": total_duration_runtime,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1696,
        "context": "            \"ending_duration_sec\": ending_duration_runtime,\n            \"total_duration_sec\": total_duration_runtime,\n        }"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1721,
        "context": "        \"entry_offset_sec\": entry_offset_runtime,\n        \"entry_duration_sec\": entry_duration_runtime,\n        \"entry_hold_sec\": entry_hold,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1725,
        "context": "        \"ending_offset_sec\": ending_offset_runtime,\n        \"ending_duration_sec\": ending_duration_runtime,\n        \"total_duration_sec\": total_duration_runtime,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1726,
        "context": "        \"ending_duration_sec\": ending_duration_runtime,\n        \"total_duration_sec\": total_duration_runtime,\n    }"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1730,
        "context": "\ndef _apply_fadeout(clip, duration: float = None):\n    \"\"\"Apply fade-out effect to video clip (both video and audio)."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1735,
        "context": "        clip: MoviePy VideoClip object\n        duration: Fade-out duration in seconds. If None, uses FADE_OUT_DURATION.\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1743,
        "context": "\n    if duration is None:\n        duration = FADE_OUT_DURATION"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1744,
        "context": "    if duration is None:\n        duration = FADE_OUT_DURATION\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1747,
        "context": "    # Skip fade-out if video is too short\n    if clip.duration < duration:\n        return clip"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1753,
        "context": "        from moviepy.video.fx.FadeOut import FadeOut\n        effect = FadeOut(duration)\n        clip_with_fadeout = effect.apply(clip)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1763,
        "context": "            from moviepy.audio.fx.AudioFadeOut import AudioFadeOut\n            audio_effect = AudioFadeOut(duration)\n            clip_with_fadeout = clip_with_fadeout.with_audio("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1774,
        "context": "\ndef _apply_fadein(clip, duration: float = None, apply_audio: bool = False):\n    \"\"\"Apply fade-in effect to video clip."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1779,
        "context": "        clip: MoviePy VideoClip object\n        duration: Fade-in duration in seconds. If None, uses FADE_IN_DURATION.\n        apply_audio: If True, also apply fade-in to audio (Phase 3 feature)."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1788,
        "context": "\n    if duration is None:\n        duration = FADE_IN_DURATION"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1789,
        "context": "    if duration is None:\n        duration = FADE_IN_DURATION\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1792,
        "context": "    # Skip fade-in if video is too short\n    if clip.duration < duration:\n        return clip"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1798,
        "context": "        from moviepy.video.fx.FadeIn import FadeIn\n        effect = FadeIn(duration)\n        clip_with_fadein = effect.apply(clip)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1808,
        "context": "            from moviepy.audio.fx.AudioFadeIn import AudioFadeIn\n            audio_effect = AudioFadeIn(duration)\n            clip_with_fadein = clip_with_fadein.with_audio("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1822,
        "context": "    output_path: str,\n    fade_in_duration: float = None,\n    apply_audio_fadein: bool = False,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1834,
        "context": "        output_path: Path for the final concatenated output video\n        fade_in_duration: Fade-in duration in seconds. If None, uses FADE_IN_DURATION.\n        apply_audio_fadein: If True, also apply fade-in to audio (Phase 3 feature)."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1843,
        "context": "        - clips_count: Number of clips concatenated\n        - total_duration: Total duration of concatenated video\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1862,
        "context": "\n    if fade_in_duration is None:\n        fade_in_duration = FADE_IN_DURATION"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1863,
        "context": "    if fade_in_duration is None:\n        fade_in_duration = FADE_IN_DURATION\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1896,
        "context": "                        clip,\n                        duration=fade_in_duration,\n                        apply_audio=apply_audio_fadein"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1932,
        "context": "\n        total_duration = float(getattr(final_clip, \"duration\", 0) or 0)\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 1979,
        "context": "            \"clips_count\": len(clips),\n            \"total_duration\": total_duration,\n        }"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2019,
        "context": "    entry_offset = float(entry_ctx.get(\"total_lead_sec\", 0.0))\n    entry_duration = float(entry_ctx.get(\"duration_sec\") or 0.0)\n    entry_hold = float(entry_ctx.get(\"hold_sec\", 0.0))"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2022,
        "context": "    entry_offset_runtime = entry_offset\n    entry_duration_runtime = entry_duration\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2025,
        "context": "    ending_ctx = _prepare_ending_context(item)\n    ending_duration_runtime = float(ending_ctx.get(\n        \"total_tail_sec\") or ending_ctx.get(\"duration_sec\") or 0.0)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2026,
        "context": "    ending_duration_runtime = float(ending_ctx.get(\n        \"total_tail_sec\") or ending_ctx.get(\"duration_sec\") or 0.0)\n    ending_offset_runtime = 0.0"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2043,
        "context": "    total_reveal_time = per * n_for_timing\n    # total video duration = countdown + time to reveal all letters\n    # plus post-reveal hold"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2045,
        "context": "    # plus post-reveal hold\n    duration = float(countdown + total_reveal_time + reveal_hold)\n    main_duration = duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2046,
        "context": "    duration = float(countdown + total_reveal_time + reveal_hold)\n    main_duration = duration\n    runtime_after_main = float(entry_offset_runtime + main_duration)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2047,
        "context": "    main_duration = duration\n    runtime_after_main = float(entry_offset_runtime + main_duration)\n    total_duration_runtime = runtime_after_main"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2048,
        "context": "    runtime_after_main = float(entry_offset_runtime + main_duration)\n    total_duration_runtime = runtime_after_main\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2054,
        "context": "        progress_segments = _build_progress_bar_segments(\n            countdown, main_duration)\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2085,
        "context": "            timer_text = f\"{mm:02d}:{ss:02d}\"\n            timer_duration = float(\n                main_duration - i) if i == countdown else 1.0"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2086,
        "context": "            timer_duration = float(\n                main_duration - i) if i == countdown else 1.0\n            if timer_duration < 0:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2087,
        "context": "                main_duration - i) if i == countdown else 1.0\n            if timer_duration < 0:\n                timer_duration = 0.0"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2088,
        "context": "            if timer_duration < 0:\n                timer_duration = 0.0\n            entry_timer = {"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2092,
        "context": "                \"text\": timer_text,\n                \"duration\": float(timer_duration),\n            }"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2098,
        "context": "            entry_timer[\"timeline_end\"] = round(\n                entry_timer[\"timeline_start\"] + entry_timer[\"duration\"], 6\n            )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2114,
        "context": "    ending_runtime[\"error\"] = ending_error\n    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2115,
        "context": "    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime\n    try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2164,
        "context": "            \"entry_offset_sec\": entry_offset_runtime,\n            \"entry_duration_sec\": entry_duration_runtime,\n            \"entry_hold_sec\": entry_hold,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2166,
        "context": "            \"entry_hold_sec\": entry_hold,\n            \"total_duration_sec\": total_duration_runtime,\n        }"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2179,
        "context": "                text=word_en, font_size=128, color=(0, 0, 0),\n                extra_bottom=32, duration=1,\n            )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2207,
        "context": "        _mpy.ColorClip(size=(1920, 1080), color=MAIN_BG_COLOR)\n        .with_duration(duration)\n    )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2271,
        "context": "                    pass\n                img_clip = _mpy.ImageClip(arr).with_duration(duration)\n                # position centered"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2427,
        "context": "\n                        # Ensure the clip spans the full composition duration\n                        # by looping it if needed"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2429,
        "context": "                        # by looping it if needed\n                        video_duration = getattr(v_cropped, \"duration\", 0)\n                        try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2431,
        "context": "                        try:\n                            if video_duration < duration:\n                                # Try approaches to create looped video"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2438,
        "context": "                                    v_looped = _mpy.vfx.loop(\n                                        v_cropped, duration=duration\n                                    )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2443,
        "context": "                                        v_looped = v_cropped.fx(\n                                            _mpy.vfx.loop, duration=duration\n                                        )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2456,
        "context": "                                            _math.ceil(\n                                                duration / max(\n                                                    0.001, video_duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2457,
        "context": "                                                duration / max(\n                                                    0.001, video_duration\n                                                )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2471,
        "context": "                                            )\n                                            v_looped = v_concat.with_duration(\n                                                duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2472,
        "context": "                                            v_looped = v_concat.with_duration(\n                                                duration\n                                            )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2485,
        "context": "                                                v_looped = (\n                                                    v_concat.with_duration(\n                                                        duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2486,
        "context": "                                                    v_concat.with_duration(\n                                                        duration\n                                                    )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2493,
        "context": "                                                current_time = 0\n                                                while current_time < duration:\n                                                    remaining = ("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2495,
        "context": "                                                    remaining = (\n                                                        duration - current_time\n                                                    )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2499,
        "context": "                                                        remaining >=\n                                                        video_duration\n                                                    ):"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2505,
        "context": "                                                        current_time += (\n                                                            video_duration\n                                                        )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2514,
        "context": "                                                        )\n                                                        current_time = duration\n                                                try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2526,
        "context": "                                                        v_cropped\n                                                        .with_duration(\n                                                            duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2527,
        "context": "                                                        .with_duration(\n                                                            duration\n                                                        )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2531,
        "context": "                                    except Exception:\n                                        # Ultimate fallback: extend duration\n                                        v_looped = v_cropped.with_duration("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2532,
        "context": "                                        # Ultimate fallback: extend duration\n                                        v_looped = v_cropped.with_duration(\n                                            duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2533,
        "context": "                                        v_looped = v_cropped.with_duration(\n                                            duration\n                                        )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2538,
        "context": "                                if v_looped is None:\n                                    v_looped = v_cropped.with_duration(\n                                        duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2539,
        "context": "                                    v_looped = v_cropped.with_duration(\n                                        duration\n                                    )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2542,
        "context": "                            else:\n                                # if clip >= duration, trim to exact duration\n                                try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2545,
        "context": "                                    v_looped = (\n                                        v_cropped.subclip(0, duration)\n                                        .with_duration("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2546,
        "context": "                                        v_cropped.subclip(0, duration)\n                                        .with_duration(\n                                            duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2547,
        "context": "                                        .with_duration(\n                                            duration\n                                        )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2553,
        "context": "                                        v_looped = (\n                                            v_cropped.with_duration(\n                                                duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2554,
        "context": "                                            v_cropped.with_duration(\n                                                duration\n                                            )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2562,
        "context": "                                v_looped = (\n                                    v_cropped.with_duration(\n                                        duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2563,
        "context": "                                    v_cropped.with_duration(\n                                        duration\n                                    )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2635,
        "context": "                            height=max(1, int(target_height)))\n                    clip_letter = clip_letter.with_duration(duration)\n                    clip_letter = clip_letter.with_position("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2654,
        "context": "            txt_letters = _make_text_imageclip(\n                text=letters_text, font_size=140, color=(0, 0, 0), duration=duration\n            )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2944,
        "context": "            arr = _np.array(img)\n            txt_zh_clip = _mpy.ImageClip(arr).with_duration(duration)\n            pos_x = 1920 - 64 - txt_zh_clip.w"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2953,
        "context": "            )\n            t = t.with_position((1920 - 64 - t.w, 64)).with_duration(duration)\n            clips.append(t)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2960,
        "context": "            timer_text = entry.get(\"text\", \"\")\n            timer_duration = max(0.0, float(entry.get(\"duration\", 0.0)))\n            if timer_duration == 0.0:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2961,
        "context": "            timer_duration = max(0.0, float(entry.get(\"duration\", 0.0)))\n            if timer_duration == 0.0:\n                continue"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2969,
        "context": "                bg=(0, 0, 0),\n                duration=timer_duration,\n            )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 2996,
        "context": "                text=word_en, font_size=128, color=(0, 0, 0),\n                extra_bottom=48, duration=1,\n            )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3018,
        "context": "            # keep substring visible until end of video\n            remaining = max(0.0, duration - start)\n            # reserve extra bottom space inside reveal image so underlines"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3022,
        "context": "            rc = _make_text_imageclip(\n                text=sub, font_size=128, color=(0, 0, 0), duration=remaining,\n                extra_bottom=48, fixed_size=fixed_canvas,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3065,
        "context": "                        rgba[..., 3] = 255\n                        ul_clip = _mpy.ImageClip(rgba).with_duration(duration)\n                        ul_clip = ul_clip.with_position((abs_x, abs_y))"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3072,
        "context": "                            ul_clip = _mpy.ColorClip(size=(w, h), color=(\n                                0, 0, 0)).with_duration(duration)\n                            ul_clip = ul_clip.with_position((abs_x, abs_y))"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3104,
        "context": "            seg_end = float(seg.get(\"end\", seg_start))\n            seg_duration = max(0.0, seg_end - seg_start)\n            if seg_duration <= 0.0:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3105,
        "context": "            seg_duration = max(0.0, seg_end - seg_start)\n            if seg_duration <= 0.0:\n                continue"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3121,
        "context": "                clip = _mpy.ImageClip(\n                    color_slice.copy()).with_duration(seg_duration)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3126,
        "context": "            try:\n                mask_clip = _make_progress_bar_mask(mask_slice, seg_duration)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3140,
        "context": "    main_clip = _mpy.CompositeVideoClip(clips, size=(1920, 1080))\n    main_clip = main_clip.with_duration(duration)\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3156,
        "context": "            try:\n                src_dur = float(getattr(af, \"duration\", 0.0) or 0.0)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3160,
        "context": "\n            # If source audio shorter than desired duration, concatenate\n            # multiple copies so the writer won't read past EOF."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3164,
        "context": "                if src_dur <= 0.0:\n                    # unusable source duration\n                    raise RuntimeError(\"source audio has zero duration\")"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3165,
        "context": "                    # unusable source duration\n                    raise RuntimeError(\"source audio has zero duration\")\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3167,
        "context": "\n                if src_dur < duration:\n                    # figure how many repeats needed"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3171,
        "context": "\n                    n = int(_math.ceil(duration / src_dur))\n                    # create repeated clips with start offsets so the"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3173,
        "context": "                    # create repeated clips with start offsets so the\n                    # composite covers the whole duration. Avoid calling\n                    # .subclip on CompositeAudioClip which may not exist."
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3184,
        "context": "                    if hasattr(af, \"subclip\"):\n                        music = af.subclip(0, duration)\n                    else:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3186,
        "context": "                    else:\n                        # try with_duration as fallback\n                        try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3188,
        "context": "                        try:\n                            music = af.with_duration(duration)\n                        except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3192,
        "context": "\n                # best-effort: ensure final clip has expected duration\n                try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3194,
        "context": "                try:\n                    music = music.with_duration(duration)\n                except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3231,
        "context": "\n        ac = _mpy.AudioClip(make_frame, duration=length, fps=44100)\n        return ac.with_start(start_sec)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3250,
        "context": "    # Note: ending.mp4 will not have additional fade-out (D8 decision)\n    main_clip = _apply_fadeout(main_clip, duration=FADE_OUT_DURATION)\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3294,
        "context": "            try:\n                dur = float(getattr(clip, \"duration\", 0.0) or 0.0)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3350,
        "context": "                            getattr(\n                                entry_clip_obj.audio, \"duration\", 0.0\n                            )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3383,
        "context": "            try:\n                probed = getattr(entry_clip_obj, \"duration\", None)\n                if probed is not None and probed > 0:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3385,
        "context": "                if probed is not None and probed > 0:\n                    entry_duration_runtime = float(probed)\n                    entry_offset_runtime = entry_duration_runtime + entry_hold"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3386,
        "context": "                    entry_duration_runtime = float(probed)\n                    entry_offset_runtime = entry_duration_runtime + entry_hold\n                    total_duration_runtime = ("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3387,
        "context": "                    entry_offset_runtime = entry_duration_runtime + entry_hold\n                    total_duration_runtime = (\n                        entry_offset_runtime + main_duration"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3388,
        "context": "                    total_duration_runtime = (\n                        entry_offset_runtime + main_duration\n                    )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3404,
        "context": "                last_t = float(\n                    max(0.0, (entry_clip_obj.duration or 0.0) - 0.04)\n                )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3411,
        "context": "                    hold_source = _mpy.ImageClip(frame)\n                hold_clip = hold_source.with_duration(entry_hold)\n                hold_clip = _ensure_dimensions(hold_clip)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3416,
        "context": "                    size=(1920, 1080), color=(0, 0, 0)\n                ).with_duration(entry_hold)\n            cleanup_clips.append(hold_clip)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3428,
        "context": "    if skip_ending:\n        ending_duration_runtime = 0.0\n        ending_clip_obj = None"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3431,
        "context": "    elif not ending_ctx.get(\"enabled\", True):\n        ending_duration_runtime = 0.0\n        ending_clip_obj = None"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3457,
        "context": "                clip_dur = float(\n                    getattr(ending_clip_obj, \"duration\", 0.0) or 0.0)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3461,
        "context": "            if clip_dur > 0.0:\n                ending_duration_runtime = clip_dur\n        except Exception as exc:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3494,
        "context": "\n    final_duration = (\n        float("
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3496,
        "context": "        float(\n            getattr(final_clip, \"duration\", total_duration_runtime)\n            or total_duration_runtime"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3497,
        "context": "            getattr(final_clip, \"duration\", total_duration_runtime)\n            or total_duration_runtime\n        )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3500,
        "context": "        if final_clip is not None\n        else total_duration_runtime\n    )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3502,
        "context": "    )\n    total_duration_runtime = final_duration\n    ending_offset_runtime = runtime_after_main"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3505,
        "context": "    if ending_ctx.get(\"enabled\", True) and (ending_clip_obj is not None or ending_ctx.get(\"exists\")):\n        ending_duration_runtime = max(\n            0.0, final_duration - ending_offset_runtime)"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3506,
        "context": "        ending_duration_runtime = max(\n            0.0, final_duration - ending_offset_runtime)\n    else:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3508,
        "context": "    else:\n        ending_duration_runtime = 0.0\n    if ending_duration_runtime < 0.0:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3509,
        "context": "        ending_duration_runtime = 0.0\n    if ending_duration_runtime < 0.0:\n        ending_duration_runtime = 0.0"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3510,
        "context": "    if ending_duration_runtime < 0.0:\n        ending_duration_runtime = 0.0\n"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3532,
        "context": "            tp[\"timeline_end\"] = round(\n                tp[\"timeline_start\"] + float(tp.get(\"duration\", 0.0)), 6\n            )"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3545,
        "context": "    ending_runtime[\"error\"] = ending_error\n    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3546,
        "context": "    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime\n    try:"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3604,
        "context": "                \"error\": entry_error,\n                \"duration_sec\": entry_duration_runtime,\n                \"total_lead_sec\": entry_offset_runtime,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3608,
        "context": "            \"entry_offset_sec\": entry_offset_runtime,\n            \"entry_duration_sec\": entry_duration_runtime,\n            \"entry_hold_sec\": entry_hold,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3612,
        "context": "            \"ending_offset_sec\": ending_offset_runtime,\n            \"ending_duration_sec\": ending_duration_runtime,\n            \"total_duration_sec\": total_duration_runtime,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3613,
        "context": "            \"ending_duration_sec\": ending_duration_runtime,\n            \"total_duration_sec\": total_duration_runtime,\n        }"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3649,
        "context": "        \"error\": entry_error,\n        \"duration_sec\": entry_duration_runtime,\n        \"total_lead_sec\": entry_offset_runtime,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3668,
        "context": "        \"entry_offset_sec\": entry_offset_runtime,\n        \"entry_duration_sec\": entry_duration_runtime,\n        \"entry_hold_sec\": entry_hold,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3672,
        "context": "        \"ending_offset_sec\": ending_offset_runtime,\n        \"ending_duration_sec\": ending_duration_runtime,\n        \"total_duration_sec\": total_duration_runtime,"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3673,
        "context": "        \"ending_duration_sec\": ending_duration_runtime,\n        \"total_duration_sec\": total_duration_runtime,\n    }"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 106,
        "context": "# Video transition effects constants\nFADE_OUT_DURATION = 3.0  # seconds - duration of fade to black at video end\nFADE_IN_DURATION = 1.0   # seconds - duration of fade from black at video start"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 107,
        "context": "FADE_OUT_DURATION = 3.0  # seconds - duration of fade to black at video end\nFADE_IN_DURATION = 1.0   # seconds - duration of fade from black at video start\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 167,
        "context": "\ndef _probe_media_duration(path: str) -> Optional[float]:\n    \"\"\"Best-effort probe for a media file duration in seconds.\"\"\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 168,
        "context": "def _probe_media_duration(path: str) -> Optional[float]:\n    \"\"\"Best-effort probe for a media file duration in seconds.\"\"\"\n    if not path or not os.path.isfile(path):"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 182,
        "context": "\n    duration: Optional[float] = None\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 188,
        "context": "            try:\n                raw = getattr(clip, \"duration\", None)\n                if raw is not None:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 190,
        "context": "                if raw is not None:\n                    duration = float(raw)\n            finally:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 197,
        "context": "        except Exception:\n            duration = None\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 199,
        "context": "\n    if duration is None:\n        candidates = ["
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 218,
        "context": "                \"-show_entries\",\n                \"format=duration\",\n                \"-of\","
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 227,
        "context": "                if text:\n                    duration = float(text)\n                    break"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 232,
        "context": "\n    if duration is not None and duration < 0:\n        duration = None"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 233,
        "context": "    if duration is not None and duration < 0:\n        duration = None\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 235,
        "context": "\n    _entry_probe_cache[cache_key] = (mtime, duration)\n    return duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 236,
        "context": "    _entry_probe_cache[cache_key] = (mtime, duration)\n    return duration\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 246,
        "context": "            \"exists\": False,\n            \"duration_sec\": 0.0,\n            \"hold_sec\": 0.0,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 255,
        "context": "    )\n    duration = _probe_media_duration(path) if exists else None\n    total_lead = (duration or 0.0) + hold"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 256,
        "context": "    duration = _probe_media_duration(path) if exists else None\n    total_lead = (duration or 0.0) + hold\n    return {"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 260,
        "context": "        \"exists\": bool(exists),\n        \"duration_sec\": duration,\n        \"hold_sec\": hold,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 274,
        "context": "            \"exists\": False,\n            \"duration_sec\": 0.0,\n            \"total_tail_sec\": 0.0,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 279,
        "context": "    exists = os.path.isfile(path)\n    duration = _probe_media_duration(path) if exists else None\n    total_tail = float(duration or 0.0) if duration else 0.0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 280,
        "context": "    duration = _probe_media_duration(path) if exists else None\n    total_tail = float(duration or 0.0) if duration else 0.0\n    return {"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 284,
        "context": "        \"exists\": bool(exists),\n        \"duration_sec\": duration,\n        \"total_tail_sec\": total_tail,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 588,
        "context": "\ndef _make_progress_bar_mask(mask_slice: _np.ndarray, duration: float):\n    \"\"\"Create a MoviePy ImageClip mask from an alpha slice.\"\"\""
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 604,
        "context": "        mask_kwargs[\"ismask\"] = True\n    clip = _mpy.ImageClip(mask_arr, **mask_kwargs).with_duration(duration)\n    return clip"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 610,
        "context": "    countdown: float,\n    total_duration: float,\n    *,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 617,
        "context": "    countdown = float(max(0.0, countdown))\n    total_duration = float(max(total_duration, countdown))\n    if fps <= 0 or bar_width <= 0:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 624,
        "context": "                \"start\": 0.0,\n                \"end\": round(total_duration, 6),\n                \"width\": 0,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 685,
        "context": "            \"start\": round(float(countdown), 6),\n            \"end\": round(float(total_duration), 6),\n            \"width\": 0,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 800,
        "context": "    bg=None,\n    duration: float = None,\n    prefer_cjk: bool = False,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 867,
        "context": "    # tiny fallback object that exposes the minimal API used by tests\n    # (get_frame, w, h, size, with_duration).\n    if _mpy is not None:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 870,
        "context": "        clip = _mpy.ImageClip(arr)\n        if duration is not None:\n            clip = clip.with_duration(duration)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 871,
        "context": "        if duration is not None:\n            clip = clip.with_duration(duration)\n        return clip"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 875,
        "context": "    class _SimpleImageClip:\n        def __init__(self, arr, duration=None):\n            self._arr = arr"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 880,
        "context": "            self.size = (self.w, self.h)\n            self._duration = duration\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 885,
        "context": "\n        def with_duration(self, duration):\n            self._duration = duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 886,
        "context": "        def with_duration(self, duration):\n            self._duration = duration\n            return self"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 891,
        "context": "        @property\n        def duration(self):\n            return self._duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 892,
        "context": "        def duration(self):\n            return self._duration\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 894,
        "context": "\n    clip = _SimpleImageClip(arr, duration=duration)\n    return clip"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1409,
        "context": "    color=(0, 0, 0),\n    duration: float = None,\n    prefer_cjk: bool = False,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1420,
        "context": "        color=color,\n        duration=duration,\n        prefer_cjk=prefer_cjk,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1461,
        "context": "\ndef synthesize_beeps(duration_sec: int = 3, rate_hz: int = 1) -> bytes:\n    \"\"\"Return a stub bytes object representing beep audio."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1466,
        "context": "    \"\"\"\n    return b\"BEEP\" * max(1, duration_sec * rate_hz)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1574,
        "context": "    entry_offset = float(entry_ctx.get(\"total_lead_sec\", 0.0))\n    entry_duration = float(entry_ctx.get(\"duration_sec\") or 0.0)\n    entry_hold = float(entry_ctx.get(\"hold_sec\", 0.0))"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1577,
        "context": "    entry_offset_runtime = entry_offset\n    entry_duration_runtime = entry_duration\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1580,
        "context": "    ending_ctx = _prepare_ending_context(item)\n    ending_duration_runtime = float(ending_ctx.get(\n        \"total_tail_sec\") or ending_ctx.get(\"duration_sec\") or 0.0)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1581,
        "context": "    ending_duration_runtime = float(ending_ctx.get(\n        \"total_tail_sec\") or ending_ctx.get(\"duration_sec\") or 0.0)\n    ending_offset_runtime = 0.0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1590,
        "context": "    total_reveal_time = per * n_for_timing\n    main_duration = float(countdown + total_reveal_time + reveal_hold)\n    runtime_after_main = float(entry_offset_runtime + main_duration)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1591,
        "context": "    main_duration = float(countdown + total_reveal_time + reveal_hold)\n    runtime_after_main = float(entry_offset_runtime + main_duration)\n    total_duration_runtime = runtime_after_main"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1592,
        "context": "    runtime_after_main = float(entry_offset_runtime + main_duration)\n    total_duration_runtime = runtime_after_main\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1598,
        "context": "        progress_segments = _build_progress_bar_segments(\n            countdown, main_duration)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1629,
        "context": "            timer_text = f\"{mm:02d}:{ss:02d}\"\n            timer_duration = float(\n                main_duration - i) if i == countdown else 1.0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1630,
        "context": "            timer_duration = float(\n                main_duration - i) if i == countdown else 1.0\n            if timer_duration < 0:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1631,
        "context": "                main_duration - i) if i == countdown else 1.0\n            if timer_duration < 0:\n                timer_duration = 0.0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1632,
        "context": "            if timer_duration < 0:\n                timer_duration = 0.0\n            entry = {"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1636,
        "context": "                \"text\": timer_text,\n                \"duration\": float(timer_duration),\n            }"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1642,
        "context": "            entry[\"timeline_end\"] = round(\n                entry[\"timeline_start\"] + entry[\"duration\"], 6\n            )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1652,
        "context": "    ending_offset_runtime = runtime_after_main\n    # Apply skip_ending logic: if skip_ending=True, set duration to 0\n    if skip_ending:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1654,
        "context": "    if skip_ending:\n        ending_duration_runtime = 0.0\n    elif not ending_ctx.get(\"enabled\", True) or not ending_ctx.get(\"exists\"):"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1656,
        "context": "    elif not ending_ctx.get(\"enabled\", True) or not ending_ctx.get(\"exists\"):\n        ending_duration_runtime = 0.0\n    total_duration_runtime = float("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1657,
        "context": "        ending_duration_runtime = 0.0\n    total_duration_runtime = float(\n        ending_offset_runtime + ending_duration_runtime)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1658,
        "context": "    total_duration_runtime = float(\n        ending_offset_runtime + ending_duration_runtime)\n    ending_runtime = dict(ending_ctx)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1662,
        "context": "    ending_runtime[\"error\"] = None\n    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1663,
        "context": "    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime\n    ending_runtime[\"size\"] = (1920, 1080) if ending_ctx.get(\"exists\") else None"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1691,
        "context": "            \"entry_offset_sec\": entry_offset_runtime,\n            \"entry_duration_sec\": entry_duration_runtime,\n            \"entry_hold_sec\": entry_hold,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1695,
        "context": "            \"ending_offset_sec\": ending_offset_runtime,\n            \"ending_duration_sec\": ending_duration_runtime,\n            \"total_duration_sec\": total_duration_runtime,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1696,
        "context": "            \"ending_duration_sec\": ending_duration_runtime,\n            \"total_duration_sec\": total_duration_runtime,\n        }"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1721,
        "context": "        \"entry_offset_sec\": entry_offset_runtime,\n        \"entry_duration_sec\": entry_duration_runtime,\n        \"entry_hold_sec\": entry_hold,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1725,
        "context": "        \"ending_offset_sec\": ending_offset_runtime,\n        \"ending_duration_sec\": ending_duration_runtime,\n        \"total_duration_sec\": total_duration_runtime,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1726,
        "context": "        \"ending_duration_sec\": ending_duration_runtime,\n        \"total_duration_sec\": total_duration_runtime,\n    }"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1730,
        "context": "\ndef _apply_fadeout(clip, duration: float = None):\n    \"\"\"Apply fade-out effect to video clip (both video and audio)."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1735,
        "context": "        clip: MoviePy VideoClip object\n        duration: Fade-out duration in seconds. If None, uses FADE_OUT_DURATION.\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1743,
        "context": "\n    if duration is None:\n        duration = FADE_OUT_DURATION"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1744,
        "context": "    if duration is None:\n        duration = FADE_OUT_DURATION\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1747,
        "context": "    # Skip fade-out if video is too short\n    if clip.duration < duration:\n        return clip"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1753,
        "context": "        from moviepy.video.fx.FadeOut import FadeOut\n        effect = FadeOut(duration)\n        clip_with_fadeout = effect.apply(clip)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1763,
        "context": "            from moviepy.audio.fx.AudioFadeOut import AudioFadeOut\n            audio_effect = AudioFadeOut(duration)\n            clip_with_fadeout = clip_with_fadeout.with_audio("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1774,
        "context": "\ndef _apply_fadein(clip, duration: float = None, apply_audio: bool = False):\n    \"\"\"Apply fade-in effect to video clip."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1779,
        "context": "        clip: MoviePy VideoClip object\n        duration: Fade-in duration in seconds. If None, uses FADE_IN_DURATION.\n        apply_audio: If True, also apply fade-in to audio (Phase 3 feature)."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1788,
        "context": "\n    if duration is None:\n        duration = FADE_IN_DURATION"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1789,
        "context": "    if duration is None:\n        duration = FADE_IN_DURATION\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1792,
        "context": "    # Skip fade-in if video is too short\n    if clip.duration < duration:\n        return clip"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1798,
        "context": "        from moviepy.video.fx.FadeIn import FadeIn\n        effect = FadeIn(duration)\n        clip_with_fadein = effect.apply(clip)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1808,
        "context": "            from moviepy.audio.fx.AudioFadeIn import AudioFadeIn\n            audio_effect = AudioFadeIn(duration)\n            clip_with_fadein = clip_with_fadein.with_audio("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1822,
        "context": "    output_path: str,\n    fade_in_duration: float = None,\n    apply_audio_fadein: bool = False,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1834,
        "context": "        output_path: Path for the final concatenated output video\n        fade_in_duration: Fade-in duration in seconds. If None, uses FADE_IN_DURATION.\n        apply_audio_fadein: If True, also apply fade-in to audio (Phase 3 feature)."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1843,
        "context": "        - clips_count: Number of clips concatenated\n        - total_duration: Total duration of concatenated video\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1862,
        "context": "\n    if fade_in_duration is None:\n        fade_in_duration = FADE_IN_DURATION"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1863,
        "context": "    if fade_in_duration is None:\n        fade_in_duration = FADE_IN_DURATION\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1896,
        "context": "                        clip,\n                        duration=fade_in_duration,\n                        apply_audio=apply_audio_fadein"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1932,
        "context": "\n        total_duration = float(getattr(final_clip, \"duration\", 0) or 0)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 1979,
        "context": "            \"clips_count\": len(clips),\n            \"total_duration\": total_duration,\n        }"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2019,
        "context": "    entry_offset = float(entry_ctx.get(\"total_lead_sec\", 0.0))\n    entry_duration = float(entry_ctx.get(\"duration_sec\") or 0.0)\n    entry_hold = float(entry_ctx.get(\"hold_sec\", 0.0))"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2022,
        "context": "    entry_offset_runtime = entry_offset\n    entry_duration_runtime = entry_duration\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2025,
        "context": "    ending_ctx = _prepare_ending_context(item)\n    ending_duration_runtime = float(ending_ctx.get(\n        \"total_tail_sec\") or ending_ctx.get(\"duration_sec\") or 0.0)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2026,
        "context": "    ending_duration_runtime = float(ending_ctx.get(\n        \"total_tail_sec\") or ending_ctx.get(\"duration_sec\") or 0.0)\n    ending_offset_runtime = 0.0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2043,
        "context": "    total_reveal_time = per * n_for_timing\n    # total video duration = countdown + time to reveal all letters\n    # plus post-reveal hold"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2045,
        "context": "    # plus post-reveal hold\n    duration = float(countdown + total_reveal_time + reveal_hold)\n    main_duration = duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2046,
        "context": "    duration = float(countdown + total_reveal_time + reveal_hold)\n    main_duration = duration\n    runtime_after_main = float(entry_offset_runtime + main_duration)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2047,
        "context": "    main_duration = duration\n    runtime_after_main = float(entry_offset_runtime + main_duration)\n    total_duration_runtime = runtime_after_main"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2048,
        "context": "    runtime_after_main = float(entry_offset_runtime + main_duration)\n    total_duration_runtime = runtime_after_main\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2054,
        "context": "        progress_segments = _build_progress_bar_segments(\n            countdown, main_duration)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2085,
        "context": "            timer_text = f\"{mm:02d}:{ss:02d}\"\n            timer_duration = float(\n                main_duration - i) if i == countdown else 1.0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2086,
        "context": "            timer_duration = float(\n                main_duration - i) if i == countdown else 1.0\n            if timer_duration < 0:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2087,
        "context": "                main_duration - i) if i == countdown else 1.0\n            if timer_duration < 0:\n                timer_duration = 0.0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2088,
        "context": "            if timer_duration < 0:\n                timer_duration = 0.0\n            entry_timer = {"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2092,
        "context": "                \"text\": timer_text,\n                \"duration\": float(timer_duration),\n            }"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2098,
        "context": "            entry_timer[\"timeline_end\"] = round(\n                entry_timer[\"timeline_start\"] + entry_timer[\"duration\"], 6\n            )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2114,
        "context": "    ending_runtime[\"error\"] = ending_error\n    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2115,
        "context": "    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime\n    try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2164,
        "context": "            \"entry_offset_sec\": entry_offset_runtime,\n            \"entry_duration_sec\": entry_duration_runtime,\n            \"entry_hold_sec\": entry_hold,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2166,
        "context": "            \"entry_hold_sec\": entry_hold,\n            \"total_duration_sec\": total_duration_runtime,\n        }"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2179,
        "context": "                text=word_en, font_size=128, color=(0, 0, 0),\n                extra_bottom=32, duration=1,\n            )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2207,
        "context": "        _mpy.ColorClip(size=(1920, 1080), color=MAIN_BG_COLOR)\n        .with_duration(duration)\n    )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2271,
        "context": "                    pass\n                img_clip = _mpy.ImageClip(arr).with_duration(duration)\n                # position centered"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2427,
        "context": "\n                        # Ensure the clip spans the full composition duration\n                        # by looping it if needed"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2429,
        "context": "                        # by looping it if needed\n                        video_duration = getattr(v_cropped, \"duration\", 0)\n                        try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2431,
        "context": "                        try:\n                            if video_duration < duration:\n                                # Try approaches to create looped video"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2438,
        "context": "                                    v_looped = _mpy.vfx.loop(\n                                        v_cropped, duration=duration\n                                    )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2443,
        "context": "                                        v_looped = v_cropped.fx(\n                                            _mpy.vfx.loop, duration=duration\n                                        )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2456,
        "context": "                                            _math.ceil(\n                                                duration / max(\n                                                    0.001, video_duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2457,
        "context": "                                                duration / max(\n                                                    0.001, video_duration\n                                                )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2471,
        "context": "                                            )\n                                            v_looped = v_concat.with_duration(\n                                                duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2472,
        "context": "                                            v_looped = v_concat.with_duration(\n                                                duration\n                                            )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2485,
        "context": "                                                v_looped = (\n                                                    v_concat.with_duration(\n                                                        duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2486,
        "context": "                                                    v_concat.with_duration(\n                                                        duration\n                                                    )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2493,
        "context": "                                                current_time = 0\n                                                while current_time < duration:\n                                                    remaining = ("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2495,
        "context": "                                                    remaining = (\n                                                        duration - current_time\n                                                    )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2499,
        "context": "                                                        remaining >=\n                                                        video_duration\n                                                    ):"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2505,
        "context": "                                                        current_time += (\n                                                            video_duration\n                                                        )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2514,
        "context": "                                                        )\n                                                        current_time = duration\n                                                try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2526,
        "context": "                                                        v_cropped\n                                                        .with_duration(\n                                                            duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2527,
        "context": "                                                        .with_duration(\n                                                            duration\n                                                        )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2531,
        "context": "                                    except Exception:\n                                        # Ultimate fallback: extend duration\n                                        v_looped = v_cropped.with_duration("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2532,
        "context": "                                        # Ultimate fallback: extend duration\n                                        v_looped = v_cropped.with_duration(\n                                            duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2533,
        "context": "                                        v_looped = v_cropped.with_duration(\n                                            duration\n                                        )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2538,
        "context": "                                if v_looped is None:\n                                    v_looped = v_cropped.with_duration(\n                                        duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2539,
        "context": "                                    v_looped = v_cropped.with_duration(\n                                        duration\n                                    )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2542,
        "context": "                            else:\n                                # if clip >= duration, trim to exact duration\n                                try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2545,
        "context": "                                    v_looped = (\n                                        v_cropped.subclip(0, duration)\n                                        .with_duration("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2546,
        "context": "                                        v_cropped.subclip(0, duration)\n                                        .with_duration(\n                                            duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2547,
        "context": "                                        .with_duration(\n                                            duration\n                                        )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2553,
        "context": "                                        v_looped = (\n                                            v_cropped.with_duration(\n                                                duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2554,
        "context": "                                            v_cropped.with_duration(\n                                                duration\n                                            )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2562,
        "context": "                                v_looped = (\n                                    v_cropped.with_duration(\n                                        duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2563,
        "context": "                                    v_cropped.with_duration(\n                                        duration\n                                    )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2635,
        "context": "                            height=max(1, int(target_height)))\n                    clip_letter = clip_letter.with_duration(duration)\n                    clip_letter = clip_letter.with_position("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2654,
        "context": "            txt_letters = _make_text_imageclip(\n                text=letters_text, font_size=140, color=(0, 0, 0), duration=duration\n            )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2944,
        "context": "            arr = _np.array(img)\n            txt_zh_clip = _mpy.ImageClip(arr).with_duration(duration)\n            pos_x = 1920 - 64 - txt_zh_clip.w"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2953,
        "context": "            )\n            t = t.with_position((1920 - 64 - t.w, 64)).with_duration(duration)\n            clips.append(t)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2960,
        "context": "            timer_text = entry.get(\"text\", \"\")\n            timer_duration = max(0.0, float(entry.get(\"duration\", 0.0)))\n            if timer_duration == 0.0:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2961,
        "context": "            timer_duration = max(0.0, float(entry.get(\"duration\", 0.0)))\n            if timer_duration == 0.0:\n                continue"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2969,
        "context": "                bg=(0, 0, 0),\n                duration=timer_duration,\n            )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 2996,
        "context": "                text=word_en, font_size=128, color=(0, 0, 0),\n                extra_bottom=48, duration=1,\n            )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3018,
        "context": "            # keep substring visible until end of video\n            remaining = max(0.0, duration - start)\n            # reserve extra bottom space inside reveal image so underlines"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3022,
        "context": "            rc = _make_text_imageclip(\n                text=sub, font_size=128, color=(0, 0, 0), duration=remaining,\n                extra_bottom=48, fixed_size=fixed_canvas,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3065,
        "context": "                        rgba[..., 3] = 255\n                        ul_clip = _mpy.ImageClip(rgba).with_duration(duration)\n                        ul_clip = ul_clip.with_position((abs_x, abs_y))"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3072,
        "context": "                            ul_clip = _mpy.ColorClip(size=(w, h), color=(\n                                0, 0, 0)).with_duration(duration)\n                            ul_clip = ul_clip.with_position((abs_x, abs_y))"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3104,
        "context": "            seg_end = float(seg.get(\"end\", seg_start))\n            seg_duration = max(0.0, seg_end - seg_start)\n            if seg_duration <= 0.0:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3105,
        "context": "            seg_duration = max(0.0, seg_end - seg_start)\n            if seg_duration <= 0.0:\n                continue"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3121,
        "context": "                clip = _mpy.ImageClip(\n                    color_slice.copy()).with_duration(seg_duration)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3126,
        "context": "            try:\n                mask_clip = _make_progress_bar_mask(mask_slice, seg_duration)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3140,
        "context": "    main_clip = _mpy.CompositeVideoClip(clips, size=(1920, 1080))\n    main_clip = main_clip.with_duration(duration)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3156,
        "context": "            try:\n                src_dur = float(getattr(af, \"duration\", 0.0) or 0.0)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3160,
        "context": "\n            # If source audio shorter than desired duration, concatenate\n            # multiple copies so the writer won't read past EOF."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3164,
        "context": "                if src_dur <= 0.0:\n                    # unusable source duration\n                    raise RuntimeError(\"source audio has zero duration\")"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3165,
        "context": "                    # unusable source duration\n                    raise RuntimeError(\"source audio has zero duration\")\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3167,
        "context": "\n                if src_dur < duration:\n                    # figure how many repeats needed"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3171,
        "context": "\n                    n = int(_math.ceil(duration / src_dur))\n                    # create repeated clips with start offsets so the"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3173,
        "context": "                    # create repeated clips with start offsets so the\n                    # composite covers the whole duration. Avoid calling\n                    # .subclip on CompositeAudioClip which may not exist."
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3184,
        "context": "                    if hasattr(af, \"subclip\"):\n                        music = af.subclip(0, duration)\n                    else:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3186,
        "context": "                    else:\n                        # try with_duration as fallback\n                        try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3188,
        "context": "                        try:\n                            music = af.with_duration(duration)\n                        except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3192,
        "context": "\n                # best-effort: ensure final clip has expected duration\n                try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3194,
        "context": "                try:\n                    music = music.with_duration(duration)\n                except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3231,
        "context": "\n        ac = _mpy.AudioClip(make_frame, duration=length, fps=44100)\n        return ac.with_start(start_sec)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3250,
        "context": "    # Note: ending.mp4 will not have additional fade-out (D8 decision)\n    main_clip = _apply_fadeout(main_clip, duration=FADE_OUT_DURATION)\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3294,
        "context": "            try:\n                dur = float(getattr(clip, \"duration\", 0.0) or 0.0)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3350,
        "context": "                            getattr(\n                                entry_clip_obj.audio, \"duration\", 0.0\n                            )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3383,
        "context": "            try:\n                probed = getattr(entry_clip_obj, \"duration\", None)\n                if probed is not None and probed > 0:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3385,
        "context": "                if probed is not None and probed > 0:\n                    entry_duration_runtime = float(probed)\n                    entry_offset_runtime = entry_duration_runtime + entry_hold"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3386,
        "context": "                    entry_duration_runtime = float(probed)\n                    entry_offset_runtime = entry_duration_runtime + entry_hold\n                    total_duration_runtime = ("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3387,
        "context": "                    entry_offset_runtime = entry_duration_runtime + entry_hold\n                    total_duration_runtime = (\n                        entry_offset_runtime + main_duration"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3388,
        "context": "                    total_duration_runtime = (\n                        entry_offset_runtime + main_duration\n                    )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3404,
        "context": "                last_t = float(\n                    max(0.0, (entry_clip_obj.duration or 0.0) - 0.04)\n                )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3411,
        "context": "                    hold_source = _mpy.ImageClip(frame)\n                hold_clip = hold_source.with_duration(entry_hold)\n                hold_clip = _ensure_dimensions(hold_clip)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3416,
        "context": "                    size=(1920, 1080), color=(0, 0, 0)\n                ).with_duration(entry_hold)\n            cleanup_clips.append(hold_clip)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3428,
        "context": "    if skip_ending:\n        ending_duration_runtime = 0.0\n        ending_clip_obj = None"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3431,
        "context": "    elif not ending_ctx.get(\"enabled\", True):\n        ending_duration_runtime = 0.0\n        ending_clip_obj = None"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3457,
        "context": "                clip_dur = float(\n                    getattr(ending_clip_obj, \"duration\", 0.0) or 0.0)\n            except Exception:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3461,
        "context": "            if clip_dur > 0.0:\n                ending_duration_runtime = clip_dur\n        except Exception as exc:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3494,
        "context": "\n    final_duration = (\n        float("
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3496,
        "context": "        float(\n            getattr(final_clip, \"duration\", total_duration_runtime)\n            or total_duration_runtime"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3497,
        "context": "            getattr(final_clip, \"duration\", total_duration_runtime)\n            or total_duration_runtime\n        )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3500,
        "context": "        if final_clip is not None\n        else total_duration_runtime\n    )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3502,
        "context": "    )\n    total_duration_runtime = final_duration\n    ending_offset_runtime = runtime_after_main"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3505,
        "context": "    if ending_ctx.get(\"enabled\", True) and (ending_clip_obj is not None or ending_ctx.get(\"exists\")):\n        ending_duration_runtime = max(\n            0.0, final_duration - ending_offset_runtime)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3506,
        "context": "        ending_duration_runtime = max(\n            0.0, final_duration - ending_offset_runtime)\n    else:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3508,
        "context": "    else:\n        ending_duration_runtime = 0.0\n    if ending_duration_runtime < 0.0:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3509,
        "context": "        ending_duration_runtime = 0.0\n    if ending_duration_runtime < 0.0:\n        ending_duration_runtime = 0.0"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3510,
        "context": "    if ending_duration_runtime < 0.0:\n        ending_duration_runtime = 0.0\n"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3532,
        "context": "            tp[\"timeline_end\"] = round(\n                tp[\"timeline_start\"] + float(tp.get(\"duration\", 0.0)), 6\n            )"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3545,
        "context": "    ending_runtime[\"error\"] = ending_error\n    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3546,
        "context": "    ending_runtime[\"duration_sec\"] = ending_duration_runtime\n    ending_runtime[\"total_tail_sec\"] = ending_duration_runtime\n    try:"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3604,
        "context": "                \"error\": entry_error,\n                \"duration_sec\": entry_duration_runtime,\n                \"total_lead_sec\": entry_offset_runtime,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3608,
        "context": "            \"entry_offset_sec\": entry_offset_runtime,\n            \"entry_duration_sec\": entry_duration_runtime,\n            \"entry_hold_sec\": entry_hold,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3612,
        "context": "            \"ending_offset_sec\": ending_offset_runtime,\n            \"ending_duration_sec\": ending_duration_runtime,\n            \"total_duration_sec\": total_duration_runtime,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3613,
        "context": "            \"ending_duration_sec\": ending_duration_runtime,\n            \"total_duration_sec\": total_duration_runtime,\n        }"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3649,
        "context": "        \"error\": entry_error,\n        \"duration_sec\": entry_duration_runtime,\n        \"total_lead_sec\": entry_offset_runtime,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3668,
        "context": "        \"entry_offset_sec\": entry_offset_runtime,\n        \"entry_duration_sec\": entry_duration_runtime,\n        \"entry_hold_sec\": entry_hold,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3672,
        "context": "        \"ending_offset_sec\": ending_offset_runtime,\n        \"ending_duration_sec\": ending_duration_runtime,\n        \"total_duration_sec\": total_duration_runtime,"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3673,
        "context": "        \"ending_duration_sec\": ending_duration_runtime,\n        \"total_duration_sec\": total_duration_runtime,\n    }"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 20,
        "context": "\ndef create_test_video(path, duration=5, color=(255, 0, 0), with_audio=False):\n    \"\"\"Helper to create a simple test video file.\"\"\""
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 22,
        "context": "    \"\"\"Helper to create a simple test video file.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=color, duration=duration)\n"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 28,
        "context": "        sample_rate = 44100\n        t = np.linspace(0, duration, int(sample_rate * duration))\n        audio_array = np.sin(2 * np.pi * 440 * t)"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 34,
        "context": "            lambda t: audio_array[int(t * sample_rate): int(t * sample_rate) + 1],\n            duration=duration,\n            fps=sample_rate,"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 56,
        "context": "\n    create_test_video(str(video1), duration=3, color=(255, 0, 0))  # Red, 3s\n    create_test_video(str(video2), duration=3, color=(0, 255, 0))  # Green, 3s"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 57,
        "context": "    create_test_video(str(video1), duration=3, color=(255, 0, 0))  # Red, 3s\n    create_test_video(str(video2), duration=3, color=(0, 255, 0))  # Green, 3s\n"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 63,
        "context": "        str(output),\n        fade_in_duration=1.0,\n        apply_audio_fadein=False,"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 71,
        "context": "    assert os.path.exists(output)\n    assert result[\"total_duration\"] > 5  # At least 6 seconds (2 videos × 3s)\n"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 75,
        "context": "    final_clip = _mpy.VideoFileClip(str(output))\n    assert final_clip.duration >= 6\n    final_clip.close()"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 87,
        "context": "        video_path = tmp_path / f\"video{i+1}.mp4\"\n        create_test_video(str(video_path), duration=2, color=color)\n        videos.append(str(video_path))"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 96,
        "context": "        str(output),\n        fade_in_duration=1.0,\n    )"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 104,
        "context": "\n    # Verify duration (3 videos × 2s = 6s minimum)\n    final_clip = _mpy.VideoFileClip(str(output))"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 106,
        "context": "    final_clip = _mpy.VideoFileClip(str(output))\n    assert final_clip.duration >= 6\n    final_clip.close()"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 117,
        "context": "\n    create_test_video(str(video1), duration=3,\n                      color=(255, 0, 0), with_audio=True)"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 119,
        "context": "                      color=(255, 0, 0), with_audio=True)\n    create_test_video(str(video2), duration=3,\n                      color=(0, 255, 0), with_audio=True)"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 126,
        "context": "        str(output),\n        fade_in_duration=1.0,\n        apply_audio_fadein=False,"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 169,
        "context": "\n    create_test_video(str(video1), duration=3, color=(255, 0, 0))\n"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 175,
        "context": "        str(output),\n        fade_in_duration=1.0,\n    )"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 184,
        "context": "\ndef test_concatenate_custom_fade_duration(tmp_path):\n    \"\"\"Test concatenation with custom fade-in duration.\"\"\""
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 185,
        "context": "def test_concatenate_custom_fade_duration(tmp_path):\n    \"\"\"Test concatenation with custom fade-in duration.\"\"\"\n    video1 = tmp_path / \"video1.mp4\""
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 190,
        "context": "\n    create_test_video(str(video1), duration=3, color=(255, 0, 0))\n    create_test_video(str(video2), duration=3, color=(0, 255, 0))"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 191,
        "context": "    create_test_video(str(video1), duration=3, color=(255, 0, 0))\n    create_test_video(str(video2), duration=3, color=(0, 255, 0))\n"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 197,
        "context": "        str(output),\n        fade_in_duration=0.5,\n    )"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 204,
        "context": "\ndef test_concatenate_default_fade_duration(tmp_path):\n    \"\"\"Test concatenation uses default FADE_IN_DURATION when None.\"\"\""
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 210,
        "context": "\n    create_test_video(str(video1), duration=3, color=(255, 0, 0))\n    create_test_video(str(video2), duration=3, color=(0, 255, 0))"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 211,
        "context": "    create_test_video(str(video1), duration=3, color=(255, 0, 0))\n    create_test_video(str(video2), duration=3, color=(0, 255, 0))\n"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 217,
        "context": "        str(output),\n        fade_in_duration=None,  # Should use FADE_IN_DURATION\n    )"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 231,
        "context": "    # Create white videos\n    create_test_video(str(video1), duration=3, color=(255, 255, 255))\n    create_test_video(str(video2), duration=3, color=(200, 200, 200))"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 232,
        "context": "    create_test_video(str(video1), duration=3, color=(255, 255, 255))\n    create_test_video(str(video2), duration=3, color=(200, 200, 200))\n"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 237,
        "context": "        str(output),\n        fade_in_duration=1.0,\n    )"
      },
      {
        "filepath": "tests/test_batch_concatenation.py",
        "line_number": 261,
        "context": "    video1 = tmp_path / \"video1.mp4\"\n    create_test_video(str(video1), duration=2, color=(255, 0, 0))\n"
      },
      {
        "filepath": "tests/test_concat.py",
        "line_number": 21,
        "context": "\ndef _duration_seconds(path):\n    ffprobe = _find_ffprobe()"
      },
      {
        "filepath": "tests/test_concat.py",
        "line_number": 30,
        "context": "        '-show_entries',\n        'format=duration',\n        '-of',"
      },
      {
        "filepath": "tests/test_concat.py",
        "line_number": 78,
        "context": "\n    # Render each item individually to determine their durations\n    indiv_files = []"
      },
      {
        "filepath": "tests/test_concat.py",
        "line_number": 115,
        "context": "                )\n        dur = _duration_seconds(out_file)\n        assert dur is not None and dur > 0"
      },
      {
        "filepath": "tests/test_concat.py",
        "line_number": 152,
        "context": "\n    merged_dur = _duration_seconds(merged_out)\n    assert merged_dur is not None and merged_dur > 0"
      },
      {
        "filepath": "tests/test_concat.py",
        "line_number": 158,
        "context": "    assert abs(merged_dur - expected) < 1.0, (\n        f'expected merged duration ~{expected}s, got {merged_dur}s'\n    )"
      },
      {
        "filepath": "tests/test_concat.py",
        "line_number": 229,
        "context": "    first, second = results\n    assert first['entry_duration_sec'] > 0\n    assert first['entry_info'].get('exists', False) is True"
      },
      {
        "filepath": "tests/test_concat.py",
        "line_number": 233,
        "context": "\n    assert second['entry_duration_sec'] == 0\n    assert second['entry_offset_sec'] == 0"
      },
      {
        "filepath": "tests/test_countdown.py",
        "line_number": 67,
        "context": "        bg=(0, 0, 0),\n        duration=1,\n    )"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 46,
        "context": "    assert ending_info[\"exists\"] is True\n    assert ending_info[\"duration_sec\"] > 0.1\n    assert ending_info[\"path\"].replace(\"/\", os.sep).endswith("
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 60,
        "context": "    assert ending_info[\"size\"] == (1920, 1080)\n    assert res[\"ending_duration_sec\"] == pytest.approx(\n        ending_info[\"duration_sec\"], rel=0.05, abs=0.2"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 61,
        "context": "    assert res[\"ending_duration_sec\"] == pytest.approx(\n        ending_info[\"duration_sec\"], rel=0.05, abs=0.2\n    )"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 63,
        "context": "    )\n    assert res[\"total_duration_sec\"] == pytest.approx(\n        res[\"ending_offset_sec\"] + res[\"ending_duration_sec\"], rel=0.01, abs=0.2"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 64,
        "context": "    assert res[\"total_duration_sec\"] == pytest.approx(\n        res[\"ending_offset_sec\"] + res[\"ending_duration_sec\"], rel=0.01, abs=0.2\n    )"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 91,
        "context": "\n    assert ending_info[\"duration_sec\"] > 0.1\n"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 101,
        "context": "        expected_offset, rel=0.05, abs=0.3)\n    assert res[\"ending_duration_sec\"] == pytest.approx(\n        ending_info[\"duration_sec\"], rel=0.05, abs=0.3"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 102,
        "context": "    assert res[\"ending_duration_sec\"] == pytest.approx(\n        ending_info[\"duration_sec\"], rel=0.05, abs=0.3\n    )"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 105,
        "context": "    assert ending_info.get(\"size\") == (1920, 1080)\n    assert res[\"total_duration_sec\"] == pytest.approx(\n        res[\"ending_offset_sec\"] + res[\"ending_duration_sec\"], rel=0.05, abs=0.3"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 106,
        "context": "    assert res[\"total_duration_sec\"] == pytest.approx(\n        res[\"ending_offset_sec\"] + res[\"ending_duration_sec\"], rel=0.05, abs=0.3\n    )"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 177,
        "context": "\n    # 當 skip_ending=True 時，ending_duration_sec 應該為 0\n    assert res[\"ending_duration_sec\"] == 0.0, \"skip_ending=True 時應該跳過片尾\""
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 178,
        "context": "    # 當 skip_ending=True 時，ending_duration_sec 應該為 0\n    assert res[\"ending_duration_sec\"] == 0.0, \"skip_ending=True 時應該跳過片尾\"\n"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 180,
        "context": "\n    # total_duration 應該不包含片尾時長\n    expected_main = ("
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 187,
        "context": "    )\n    assert res[\"total_duration_sec\"] == pytest.approx(\n        expected_main, rel=0.01, abs=0.05"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 209,
        "context": "    )\n    assert res1[\"ending_duration_sec\"] > 0.1, \"skip_ending=False 時應該包含片尾\"\n"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 213,
        "context": "    res2 = utils.render_video_stub(item, \"out/test_default.mp4\", dry_run=True)\n    assert res2[\"ending_duration_sec\"] > 0.1, \"預設應該包含片尾（向後兼容）\"\n"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 216,
        "context": "    # 兩者應該有相同的片尾時長\n    assert res1[\"ending_duration_sec\"] == pytest.approx(\n        res2[\"ending_duration_sec\"], rel=0.01, abs=0.05"
      },
      {
        "filepath": "tests/test_ending_video.py",
        "line_number": 217,
        "context": "    assert res1[\"ending_duration_sec\"] == pytest.approx(\n        res2[\"ending_duration_sec\"], rel=0.01, abs=0.05\n    )"
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 52,
        "context": "\ndef _probe_duration(ffprobe: str, path: pathlib.Path) -> float:\n    cmd = ["
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 58,
        "context": "        \"-show_entries\",\n        \"format=duration\",\n        \"-of\","
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 72,
        "context": "def _measure_audio_rms(\n    ffmpeg: str, path: pathlib.Path, *, duration: float | None = None\n) -> float:"
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 87,
        "context": "    ]\n    if duration is not None:\n        args += [\"-t\", f\"{duration:.3f}\"]"
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 88,
        "context": "    if duration is not None:\n        args += [\"-t\", f\"{duration:.3f}\"]\n    args += [\"-f\", \"s16le\", \"pipe:1\"]"
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 132,
        "context": "\n    duration = entry_info.get(\"duration_sec\")\n    expected_offset = hold + (duration or 0.0)"
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 133,
        "context": "    duration = entry_info.get(\"duration_sec\")\n    expected_offset = hold + (duration or 0.0)\n    assert res[\"entry_offset_sec\"] == pytest.approx("
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 201,
        "context": "        entry_info = res[\"entry_info\"]\n        entry_duration = entry_info.get(\"duration_sec\") or 0.0\n        expected_offset = entry_duration + item[\"entry_hold_sec\"]"
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 202,
        "context": "        entry_duration = entry_info.get(\"duration_sec\") or 0.0\n        expected_offset = entry_duration + item[\"entry_hold_sec\"]\n        assert res[\"entry_offset_sec\"] == pytest.approx("
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 219,
        "context": "        )\n        assert res[\"total_duration_sec\"] == pytest.approx(\n            total_expected, rel=0.05, abs=0.5"
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 248,
        "context": "    ref_entry_path = None\n    ref_duration = None\n    ref_rms = 0.0"
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 251,
        "context": "    for candidate in entry_candidates:\n        duration = _probe_duration(ffprobe, candidate)\n        rms = _measure_audio_rms("
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 253,
        "context": "        rms = _measure_audio_rms(\n            ffmpeg, candidate, duration=min(duration, 5.0))\n        if rms > 0.001:"
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 256,
        "context": "            ref_entry_path = candidate\n            ref_duration = min(duration, 5.0)\n            ref_rms = rms"
      },
      {
        "filepath": "tests/test_entry_video.py",
        "line_number": 263,
        "context": "    sample_rms = _measure_audio_rms(\n        ffmpeg, sample_output, duration=ref_duration)\n    assert sample_rms >= ref_rms * 0.5, ("
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 66,
        "context": "        bg=(0, 0, 0),\n        duration=1,\n        prefer_cjk=False,"
      },
      {
        "filepath": "tests/test_layout.py",
        "line_number": 150,
        "context": "        bg=None,\n        duration=1,\n        prefer_cjk=False,"
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 56,
        "context": "        sr = 44100\n        duration = 1.0  # seconds\n        freq = 440.0"
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 58,
        "context": "        freq = 440.0\n        n_samples = int(sr * duration)\n        amp = 0.6"
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 125,
        "context": "        if ffprobe:\n            # query audio stream duration\n            cmd = ["
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 133,
        "context": "                \"-show_entries\",\n                \"stream=duration\",\n                \"-of\","
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 144,
        "context": "                )\n            # take the first audio stream duration\n            try:"
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 149,
        "context": "                audio_dur = 0.0\n            # audio should cover most of the video duration\n            if audio_dur < expected_dur * 0.75:"
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 152,
        "context": "                raise AssertionError(\n                    f\"audio duration ({audio_dur:.2f}s) \"\n                    f\"is too short vs expected {expected_dur:.2f}s\""
      },
      {
        "filepath": "tests/test_music_inclusion.py",
        "line_number": 167,
        "context": "                assert audio is not None, \"output video missing audio track\"\n                assert audio.duration > 0.1, \"audio track too short\"\n            finally:"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 32,
        "context": "\ndef _color_visibility_duration(segments, color):\n    total = 0.0"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 65,
        "context": "        countdown=10,\n        total_duration=16,\n    )"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 105,
        "context": "        countdown=10,\n        total_duration=14,\n    )"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 116,
        "context": "\n    safe_duration = _color_visibility_duration(segments, PROG_COLORS[\"safe\"])\n    warn_duration = _color_visibility_duration(segments, PROG_COLORS[\"warn\"])"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 117,
        "context": "    safe_duration = _color_visibility_duration(segments, PROG_COLORS[\"safe\"])\n    warn_duration = _color_visibility_duration(segments, PROG_COLORS[\"warn\"])\n    danger_duration = _color_visibility_duration(segments, PROG_COLORS[\"danger\"])"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 118,
        "context": "    warn_duration = _color_visibility_duration(segments, PROG_COLORS[\"warn\"])\n    danger_duration = _color_visibility_duration(segments, PROG_COLORS[\"danger\"])\n"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 121,
        "context": "    countdown = 10\n    assert safe_duration == pytest.approx(countdown * PROG_RATIOS[\"safe\"], rel=0.1)\n    assert warn_duration == pytest.approx(countdown * (PROG_RATIOS[\"safe\"] + PROG_RATIOS[\"warn\"]), rel=0.1)"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 122,
        "context": "    assert safe_duration == pytest.approx(countdown * PROG_RATIOS[\"safe\"], rel=0.1)\n    assert warn_duration == pytest.approx(countdown * (PROG_RATIOS[\"safe\"] + PROG_RATIOS[\"warn\"]), rel=0.1)\n    assert danger_duration == pytest.approx(countdown, rel=0.05)"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 123,
        "context": "    assert warn_duration == pytest.approx(countdown * (PROG_RATIOS[\"safe\"] + PROG_RATIOS[\"warn\"]), rel=0.1)\n    assert danger_duration == pytest.approx(countdown, rel=0.05)\n    assert warn_duration - safe_duration == pytest.approx(countdown * PROG_RATIOS[\"warn\"], rel=0.1)"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 124,
        "context": "    assert danger_duration == pytest.approx(countdown, rel=0.05)\n    assert warn_duration - safe_duration == pytest.approx(countdown * PROG_RATIOS[\"warn\"], rel=0.1)\n    assert danger_duration - warn_duration == pytest.approx(countdown * PROG_RATIOS[\"danger\"], rel=0.1)"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 125,
        "context": "    assert warn_duration - safe_duration == pytest.approx(countdown * PROG_RATIOS[\"warn\"], rel=0.1)\n    assert danger_duration - warn_duration == pytest.approx(countdown * PROG_RATIOS[\"danger\"], rel=0.1)\n"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 158,
        "context": "\n    def duration_for(color_key):\n        target = PROG_COLORS[color_key]"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 160,
        "context": "        target = PROG_COLORS[color_key]\n        return _color_visibility_duration(segments, target)\n"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 163,
        "context": "    countdown = item[\"countdown_sec\"]\n    assert duration_for(\"safe\") == pytest.approx(countdown * PROG_RATIOS[\"safe\"], rel=0.1)\n    assert duration_for(\"warn\") == pytest.approx(countdown * (PROG_RATIOS[\"safe\"] + PROG_RATIOS[\"warn\"]), rel=0.1)"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 164,
        "context": "    assert duration_for(\"safe\") == pytest.approx(countdown * PROG_RATIOS[\"safe\"], rel=0.1)\n    assert duration_for(\"warn\") == pytest.approx(countdown * (PROG_RATIOS[\"safe\"] + PROG_RATIOS[\"warn\"]), rel=0.1)\n    assert duration_for(\"danger\") == pytest.approx(countdown, rel=0.05)"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 165,
        "context": "    assert duration_for(\"warn\") == pytest.approx(countdown * (PROG_RATIOS[\"safe\"] + PROG_RATIOS[\"warn\"]), rel=0.1)\n    assert duration_for(\"danger\") == pytest.approx(countdown, rel=0.05)\n    assert duration_for(\"warn\") - duration_for(\"safe\") == pytest.approx(countdown * PROG_RATIOS[\"warn\"], rel=0.1)"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 166,
        "context": "    assert duration_for(\"danger\") == pytest.approx(countdown, rel=0.05)\n    assert duration_for(\"warn\") - duration_for(\"safe\") == pytest.approx(countdown * PROG_RATIOS[\"warn\"], rel=0.1)\n    assert duration_for(\"danger\") - duration_for(\"warn\") == pytest.approx(countdown * PROG_RATIOS[\"danger\"], rel=0.1)"
      },
      {
        "filepath": "tests/test_progress_bar.py",
        "line_number": 167,
        "context": "    assert duration_for(\"warn\") - duration_for(\"safe\") == pytest.approx(countdown * PROG_RATIOS[\"warn\"], rel=0.1)\n    assert duration_for(\"danger\") - duration_for(\"warn\") == pytest.approx(countdown * PROG_RATIOS[\"danger\"], rel=0.1)\n"
      },
      {
        "filepath": "tests/test_reveal_stable_positions.py",
        "line_number": 45,
        "context": "    full = utils._make_text_imageclip(\n        text=word, font_size=128, extra_bottom=32, duration=1\n    )"
      },
      {
        "filepath": "tests/test_reveal_stable_positions.py",
        "line_number": 61,
        "context": "        extra_bottom=32,\n        duration=1,\n        fixed_size=fixed,"
      },
      {
        "filepath": "tests/test_reveal_stable_positions.py",
        "line_number": 73,
        "context": "        extra_bottom=32,\n        duration=1,\n        fixed_size=fixed,"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 26,
        "context": "    # Create a 10-second white color clip\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 29,
        "context": "    # Apply fade-out\n    result = _apply_fadeout(clip, duration=3.0)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 33,
        "context": "    assert result is not None\n    assert result.duration == 10  # Duration unchanged\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 52,
        "context": "    \"\"\"Test short video (< 3 seconds) should not apply fade-out.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=2.0)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 54,
        "context": "    \n    result = _apply_fadeout(clip, duration=3.0)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 58,
        "context": "    assert result is not None\n    assert result.duration == 2.0\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 72,
        "context": "    # Create video clip\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 76,
        "context": "    sample_rate = 44100\n    duration = 10\n    t = np.linspace(0, duration, int(sample_rate * duration))"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 77,
        "context": "    duration = 10\n    t = np.linspace(0, duration, int(sample_rate * duration))\n    audio_array = np.sin(2 * np.pi * 440 * t)"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 84,
        "context": "        lambda t: audio_array[int(t * sample_rate) : int(t * sample_rate) + 1],\n        duration=duration,\n        fps=sample_rate,"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 90,
        "context": "    # Apply fade-out\n    result = _apply_fadeout(clip, duration=3.0)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 95,
        "context": "    assert result.audio is not None\n    assert result.audio.duration == 10\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 106,
        "context": "    \"\"\"Test video without audio should not error.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)\n    clip = clip.without_audio()  # Ensure no audio"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 109,
        "context": "    \n    result = _apply_fadeout(clip, duration=3.0)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 122,
        "context": "    \"\"\"Test 10-second video with 1-second fade-in.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 125,
        "context": "    # Apply fade-in\n    result = _apply_fadein(clip, duration=1.0, apply_audio=False)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 129,
        "context": "    assert result is not None\n    assert result.duration == 10  # Duration unchanged\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 148,
        "context": "    \"\"\"Test short video (< 1 second) should not apply fade-in.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=0.5)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 150,
        "context": "    \n    result = _apply_fadein(clip, duration=1.0, apply_audio=False)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 154,
        "context": "    assert result is not None\n    assert result.duration == 0.5\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 168,
        "context": "    # Create video clip with audio\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 172,
        "context": "    sample_rate = 44100\n    duration = 10\n    t = np.linspace(0, duration, int(sample_rate * duration))"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 173,
        "context": "    duration = 10\n    t = np.linspace(0, duration, int(sample_rate * duration))\n    audio_array = np.sin(2 * np.pi * 440 * t)"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 179,
        "context": "        lambda t: audio_array[int(t * sample_rate) : int(t * sample_rate) + 1],\n        duration=duration,\n        fps=sample_rate,"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 185,
        "context": "    # Apply fade-in with audio disabled\n    result = _apply_fadein(clip, duration=1.0, apply_audio=False)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 203,
        "context": "    # Create video clip with audio\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 207,
        "context": "    sample_rate = 44100\n    duration = 10\n    t = np.linspace(0, duration, int(sample_rate * duration))"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 208,
        "context": "    duration = 10\n    t = np.linspace(0, duration, int(sample_rate * duration))\n    audio_array = np.sin(2 * np.pi * 440 * t)"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 214,
        "context": "        lambda t: audio_array[int(t * sample_rate) : int(t * sample_rate) + 1],\n        duration=duration,\n        fps=sample_rate,"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 220,
        "context": "    # Apply fade-in with audio enabled\n    result = _apply_fadein(clip, duration=1.0, apply_audio=True)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 222,
        "context": "    \n    # Verify audio exists and duration correct\n    assert result is not None"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 225,
        "context": "    assert result.audio is not None\n    assert result.audio.duration == 10\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 234,
        "context": "\ndef test_fadeout_custom_duration():\n    \"\"\"Test fade-out with custom duration.\"\"\""
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 235,
        "context": "def test_fadeout_custom_duration():\n    \"\"\"Test fade-out with custom duration.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 236,
        "context": "    \"\"\"Test fade-out with custom duration.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 239,
        "context": "    # Apply 2-second fade-out\n    result = _apply_fadeout(clip, duration=2.0)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 242,
        "context": "    assert result is not None\n    assert result.duration == 10\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 250,
        "context": "\ndef test_fadein_custom_duration():\n    \"\"\"Test fade-in with custom duration.\"\"\""
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 251,
        "context": "def test_fadein_custom_duration():\n    \"\"\"Test fade-in with custom duration.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 252,
        "context": "    \"\"\"Test fade-in with custom duration.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 255,
        "context": "    # Apply 1.5-second fade-in\n    result = _apply_fadein(clip, duration=1.5, apply_audio=False)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 258,
        "context": "    assert result is not None\n    assert result.duration == 10\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 266,
        "context": "\ndef test_fadeout_default_duration():\n    \"\"\"Test fade-out uses default FADE_OUT_DURATION when duration=None.\"\"\""
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 267,
        "context": "def test_fadeout_default_duration():\n    \"\"\"Test fade-out uses default FADE_OUT_DURATION when duration=None.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 268,
        "context": "    \"\"\"Test fade-out uses default FADE_OUT_DURATION when duration=None.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 270,
        "context": "    \n    # Apply fade-out with duration=None (should use FADE_OUT_DURATION)\n    result = _apply_fadeout(clip, duration=None)"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 271,
        "context": "    # Apply fade-out with duration=None (should use FADE_OUT_DURATION)\n    result = _apply_fadeout(clip, duration=None)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 274,
        "context": "    assert result is not None\n    assert result.duration == 10\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 282,
        "context": "\ndef test_fadein_default_duration():\n    \"\"\"Test fade-in uses default FADE_IN_DURATION when duration=None.\"\"\""
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 283,
        "context": "def test_fadein_default_duration():\n    \"\"\"Test fade-in uses default FADE_IN_DURATION when duration=None.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 284,
        "context": "    \"\"\"Test fade-in uses default FADE_IN_DURATION when duration=None.\"\"\"\n    clip = _mpy.ColorClip(size=(1920, 1080), color=(255, 255, 255), duration=10)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 286,
        "context": "    \n    # Apply fade-in with duration=None (should use FADE_IN_DURATION)\n    result = _apply_fadein(clip, duration=None, apply_audio=False)"
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 287,
        "context": "    # Apply fade-in with duration=None (should use FADE_IN_DURATION)\n    result = _apply_fadein(clip, duration=None, apply_audio=False)\n    "
      },
      {
        "filepath": "tests/test_transition_fadeout.py",
        "line_number": 290,
        "context": "    assert result is not None\n    assert result.duration == 10\n    "
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 51,
        "context": "        required_methods = [\n            'probe_duration',\n            'probe_dimensions',"
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 63,
        "context": "\n    def test_probe_duration_with_valid_file(self):\n        \"\"\"TC-CONTRACT-018: 驗證 probe_duration 回傳浮點數時長"
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 64,
        "context": "    def test_probe_duration_with_valid_file(self):\n        \"\"\"TC-CONTRACT-018: 驗證 probe_duration 回傳浮點數時長\n"
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 67,
        "context": "        測試案例: 回傳值型別檢查\n        前置條件: FFmpegWrapper.probe_duration 已實作\n        預期結果: 回傳 float 型別的秒數"
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 84,
        "context": "        if test_audio.exists():\n            duration = wrapper.probe_duration(str(test_audio))\n"
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 86,
        "context": "\n            assert isinstance(duration, float), \\\n                \"probe_duration 必須回傳 float\""
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 87,
        "context": "            assert isinstance(duration, float), \\\n                \"probe_duration 必須回傳 float\"\n            assert duration > 0, \"音訊時長必須 > 0\""
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 88,
        "context": "                \"probe_duration 必須回傳 float\"\n            assert duration > 0, \"音訊時長必須 > 0\"\n        else:"
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 92,
        "context": "\n    def test_probe_duration_file_not_found(self):\n        \"\"\"TC-CONTRACT-019: 驗證 probe_duration 對不存在檔案拋出異常"
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 93,
        "context": "    def test_probe_duration_file_not_found(self):\n        \"\"\"TC-CONTRACT-019: 驗證 probe_duration 對不存在檔案拋出異常\n"
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 96,
        "context": "        測試案例: 錯誤處理\n        前置條件: FFmpegWrapper.probe_duration 已實作\n        預期結果: 拋出 FileNotFoundError"
      },
      {
        "filepath": "tests/contract/test_media_processor_contract.py",
        "line_number": 106,
        "context": "        with pytest.raises(FileNotFoundError):\n            wrapper.probe_duration(\"/nonexistent/file.mp3\")\n"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 58,
        "context": "            color=(255, 0, 0),\n            duration=1.0\n        )"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 62,
        "context": "        assert clip is not None\n        assert hasattr(clip, 'duration')\n        assert clip.duration == 1.0"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 63,
        "context": "        assert hasattr(clip, 'duration')\n        assert clip.duration == 1.0\n"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 73,
        "context": "            image_array=img,\n            duration=2.0,\n            position=(10, 10)"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 78,
        "context": "        assert clip is not None\n        assert hasattr(clip, 'duration')\n        assert clip.duration == 2.0"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 79,
        "context": "        assert hasattr(clip, 'duration')\n        assert clip.duration == 2.0\n"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 92,
        "context": "        assert composed is not None\n        assert hasattr(composed, 'duration')\n"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 103,
        "context": "        assert faded is not None\n        assert hasattr(faded, 'duration')\n        assert faded.duration == 5.0  # 總時長不變"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 104,
        "context": "        assert hasattr(faded, 'duration')\n        assert faded.duration == 5.0  # 總時長不變\n"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 117,
        "context": "        assert combined is not None\n        assert hasattr(combined, 'duration')\n        # chain 方法應該串接時間"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 119,
        "context": "        # chain 方法應該串接時間\n        assert combined.duration == 5.0\n"
      },
      {
        "filepath": "tests/contract/test_video_composer_contract.py",
        "line_number": 140,
        "context": "                \"/nonexistent/path/to/video.mp4\",\n                duration=5.0\n            )"
      },
      {
        "filepath": "tests/integration/test_batch_service.py",
        "line_number": 99,
        "context": "        #     skip_ending_calls.append(kwargs.get(\"skip_ending\", False))\n        #     return {\"success\": True, \"duration\": 5.0}\n        #"
      },
      {
        "filepath": "tests/integration/test_batch_service.py",
        "line_number": 137,
        "context": "        #     skip_ending_calls.append(kwargs.get(\"skip_ending\", False))\n        #     return {\"success\": True, \"duration\": 5.0}\n        #"
      },
      {
        "filepath": "tests/integration/test_video_service.py",
        "line_number": 52,
        "context": "        assert \"metadata\" in result, \"應該包含 metadata\"\n        assert \"duration\" in result, \"應該包含 duration\"\n        assert mock_composer.render_to_file.call_count == 0, \\"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 31,
        "context": "        result = apply_fadeout(\n            clip_duration=5.0,\n            fadeout_duration=1.0"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 32,
        "context": "            clip_duration=5.0,\n            fadeout_duration=1.0\n        )"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 36,
        "context": "        assert result[\"start_time\"] == 4.0, \"淡出應該從第 4 秒開始\"\n        assert result[\"duration\"] == 1.0, \"淡出持續 1 秒\"\n        assert result[\"clip_duration\"] == 5.0, \"視頻總長度 5 秒\""
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 37,
        "context": "        assert result[\"duration\"] == 1.0, \"淡出持續 1 秒\"\n        assert result[\"clip_duration\"] == 5.0, \"視頻總長度 5 秒\"\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 39,
        "context": "\n    def test_apply_fadeout_zero_duration(self):\n        \"\"\"TC-EFFECT-002: 驗證零淡出持續時間"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 43,
        "context": "        測試案例: 不應用淡出效果\n        前置條件: fadeout_duration 為 0\n        預期結果: 回傳 None 或指示不應用效果"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 49,
        "context": "        result = apply_fadeout(\n            clip_duration=5.0,\n            fadeout_duration=0.0"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 50,
        "context": "            clip_duration=5.0,\n            fadeout_duration=0.0\n        )"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 53,
        "context": "\n        assert result is None or result[\"duration\"] == 0.0\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 55,
        "context": "\n    def test_apply_fadeout_exceeds_duration(self):\n        \"\"\"TC-EFFECT-003: 驗證淡出時間過長的處理"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 59,
        "context": "        測試案例: 淡出時間 >= 視頻長度\n        前置條件: fadeout_duration >= clip_duration\n        預期結果: 拋出 ValueError 或限制為最大可用時長"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 66,
        "context": "        with pytest.raises(ValueError, match=\"持續時間.*超過.*最大值\"):\n            apply_fadeout(clip_duration=3.0, fadeout_duration=5.0)\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 70,
        "context": "        with pytest.raises(ValueError):\n            apply_fadeout(clip_duration=3.0, fadeout_duration=3.0)\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 82,
        "context": "        result = apply_fadeout(\n            clip_duration=1.5,\n            fadeout_duration=0.5"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 83,
        "context": "            clip_duration=1.5,\n            fadeout_duration=0.5\n        )"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 87,
        "context": "        assert result[\"start_time\"] == 1.0\n        assert result[\"duration\"] == 0.5\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 102,
        "context": "\n        result = apply_fadein(fadein_duration=0.5)\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 105,
        "context": "        assert result[\"start_time\"] == 0.0, \"淡入從視頻開始\"\n        assert result[\"duration\"] == 0.5, \"淡入持續 0.5 秒\"\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 107,
        "context": "\n    def test_apply_fadein_zero_duration(self):\n        \"\"\"TC-EFFECT-006: 驗證零淡入持續時間"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 115,
        "context": "\n        result = apply_fadein(fadein_duration=0.0)\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 117,
        "context": "\n        assert result is None or result[\"duration\"] == 0.0\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 133,
        "context": "        result = plan_transition(\n            clip1_duration=5.0,\n            clip2_duration=3.0,"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 134,
        "context": "            clip1_duration=5.0,\n            clip2_duration=3.0,\n            transition_duration=0.5"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 135,
        "context": "            clip2_duration=3.0,\n            transition_duration=0.5\n        )"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 142,
        "context": "        assert result[\"clip2_start_time\"] == 4.5\n        # 總長度 = clip1_duration + clip2_duration - transition_duration\n        assert result[\"total_duration\"] == 7.5"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 143,
        "context": "        # 總長度 = clip1_duration + clip2_duration - transition_duration\n        assert result[\"total_duration\"] == 7.5\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 148,
        "context": "\n        測試案例: transition_duration 為 0\n        預期結果: clip 依序播放,無重疊"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 154,
        "context": "        result = plan_transition(\n            clip1_duration=5.0,\n            clip2_duration=3.0,"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 155,
        "context": "            clip1_duration=5.0,\n            clip2_duration=3.0,\n            transition_duration=0.0"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 156,
        "context": "            clip2_duration=3.0,\n            transition_duration=0.0\n        )"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 160,
        "context": "        assert result[\"clip2_start_time\"] == 5.0, \"clip2 在 clip1 結束後開始\"\n        assert result[\"total_duration\"] == 8.0\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 166,
        "context": "\n    def test_validate_effect_duration_negative(self):\n        \"\"\"TC-EFFECT-009: 驗證負數持續時間拒絕"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 172,
        "context": "        \"\"\"\n        from spellvid.domain.effects import validate_effect_duration\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 175,
        "context": "        with pytest.raises(ValueError, match=\"持續時間.*不能為負數\"):\n            validate_effect_duration(-1.0)\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 177,
        "context": "\n    def test_validate_effect_duration_too_large(self):\n        \"\"\"TC-EFFECT-010: 驗證過大持續時間拒絕"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 183,
        "context": "        \"\"\"\n        from spellvid.domain.effects import validate_effect_duration\n"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 186,
        "context": "        with pytest.raises(ValueError, match=\"持續時間.*超過.*最大值\"):\n            validate_effect_duration(\n                duration=10.0,"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 187,
        "context": "            validate_effect_duration(\n                duration=10.0,\n                clip_duration=5.0"
      },
      {
        "filepath": "tests/unit/domain/test_effects.py",
        "line_number": 188,
        "context": "                duration=10.0,\n                clip_duration=5.0\n            )"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 106,
        "context": "        timeline = calculate_timeline(\n            video_duration=10.0,\n            fadeout_duration=0.0"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 107,
        "context": "            video_duration=10.0,\n            fadeout_duration=0.0\n        )"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 110,
        "context": "\n        assert timeline[\"total_duration\"] == 10.0\n        assert timeline[\"video_start\"] == 0.0"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 124,
        "context": "        timeline = calculate_timeline(\n            video_duration=10.0,\n            fadeout_duration=2.0"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 125,
        "context": "            video_duration=10.0,\n            fadeout_duration=2.0\n        )"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 135,
        "context": "        assert fadeout_event[\"time\"] == 8.0\n        assert fadeout_event[\"duration\"] == 2.0\n"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 147,
        "context": "        timeline = calculate_timeline(\n            video_duration=10.0,\n            reveal_time=3.0"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 167,
        "context": "        timeline = calculate_timeline(\n            video_duration=10.0,\n            reveal_time=3.0,"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 169,
        "context": "            reveal_time=3.0,\n            fadeout_duration=2.0,\n            timer_update_interval=1.0"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 199,
        "context": "        updates = calculate_timer_updates(\n            video_duration=10.0,\n            update_interval=1.0"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 216,
        "context": "        updates = calculate_timer_updates(\n            video_duration=5.0,\n            update_interval=0.5"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 240,
        "context": "\n    def test_calculate_timeline_zero_duration(self):\n        \"\"\"TC-TIMING-013: 驗證零長度視頻"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 249,
        "context": "        with pytest.raises(ValueError, match=\"視頻長度.*必須大於零\"):\n            calculate_timeline(video_duration=0.0)\n"
      },
      {
        "filepath": "tests/unit/domain/test_timing.py",
        "line_number": 261,
        "context": "            calculate_timeline(\n                video_duration=10.0,\n                reveal_time=15.0"
      },
      {
        "filepath": "spellvid/application/resource_checker.py",
        "line_number": 85,
        "context": "        - video_path: str (若存在)\n        - duration: float (若可查詢)\n        - exists: bool"
      },
      {
        "filepath": "spellvid/application/resource_checker.py",
        "line_number": 91,
        "context": "        >>> if entry[\"exists\"]:\n        ...     print(f\"片頭時長: {entry['duration']}秒\")\n    \"\"\""
      },
      {
        "filepath": "spellvid/application/resource_checker.py",
        "line_number": 98,
        "context": "        \"video_path\": entry_video_path,\n        \"duration\": 0.0,\n        \"exists\": False,"
      },
      {
        "filepath": "spellvid/application/resource_checker.py",
        "line_number": 110,
        "context": "        # 1. 注入 IMediaProcessor\n        # 2. 呼叫 probe_duration()\n        # 簡化版本暫返回固定值"
      },
      {
        "filepath": "spellvid/application/resource_checker.py",
        "line_number": 112,
        "context": "        # 簡化版本暫返回固定值\n        result[\"duration\"] = 3.0\n"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 53,
        "context": "        - success: bool\n        - duration: float (總時長)\n        - output_path: str"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 77,
        "context": "    reveal_time = len(config.word_en) * per_letter_time\n    main_duration = config.countdown_sec + reveal_time + config.reveal_hold_sec\n"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 81,
        "context": "    timeline = calculate_timeline(\n        video_duration=main_duration,\n        fadeout_duration=0.0,  # 簡化版本暫不處理淡出"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 82,
        "context": "        video_duration=main_duration,\n        fadeout_duration=0.0,  # 簡化版本暫不處理淡出\n    )"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 86,
        "context": "    # 計算總時長\n    entry_duration = 0.0  # 簡化版本暫不處理片頭\n    ending_duration = 0.0 if skip_ending else 0.0  # 簡化版本暫不處理片尾"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 87,
        "context": "    entry_duration = 0.0  # 簡化版本暫不處理片頭\n    ending_duration = 0.0 if skip_ending else 0.0  # 簡化版本暫不處理片尾\n"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 89,
        "context": "\n    total_duration = entry_duration + main_duration + ending_duration\n"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 102,
        "context": "        },\n        \"duration\": {\n            \"entry\": entry_duration,"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 103,
        "context": "        \"duration\": {\n            \"entry\": entry_duration,\n            \"main\": main_duration,"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 104,
        "context": "            \"entry\": entry_duration,\n            \"main\": main_duration,\n            \"ending\": ending_duration,"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 105,
        "context": "            \"main\": main_duration,\n            \"ending\": ending_duration,\n            \"total\": total_duration,"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 106,
        "context": "            \"ending\": ending_duration,\n            \"total\": total_duration,\n        },"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 114,
        "context": "            \"success\": True,\n            \"duration\": total_duration,\n            \"output_path\": output_path,"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 150,
        "context": "            color=COLOR_WHITE,\n            duration=total_duration,\n        )"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 163,
        "context": "        #         clip=final_clip,\n        #         duration=config.fadeout_sec,\n        #     )"
      },
      {
        "filepath": "spellvid/application/video_service.py",
        "line_number": 176,
        "context": "            \"success\": True,\n            \"duration\": total_duration,\n            \"output_path\": output_path,"
      },
      {
        "filepath": "spellvid/cli/commands.py",
        "line_number": 79,
        "context": "            print(f\"[OK] Video {status} successfully\")\n            print(f\"  Duration: {result['duration']:.2f}s\")\n            print(f\"  Output: {result['output_path']}\")"
      },
      {
        "filepath": "spellvid/cli/parser.py",
        "line_number": 258,
        "context": "    batch_parser.add_argument(\n        \"--fade-out-duration\",\n        type=float,"
      },
      {
        "filepath": "spellvid/cli/parser.py",
        "line_number": 260,
        "context": "        type=float,\n        dest=\"fade_out_duration\",\n        default=None,"
      },
      {
        "filepath": "spellvid/cli/parser.py",
        "line_number": 265,
        "context": "    batch_parser.add_argument(\n        \"--fade-in-duration\",\n        type=float,"
      },
      {
        "filepath": "spellvid/cli/parser.py",
        "line_number": 267,
        "context": "        type=float,\n        dest=\"fade_in_duration\",\n        default=None,"
      },
      {
        "filepath": "spellvid/cli/parser.py",
        "line_number": 348,
        "context": "        \"out_file\": getattr(args, \"out_file\", None),\n        \"fade_out_duration\": getattr(args, \"fade_out_duration\", None),\n        \"fade_in_duration\": getattr(args, \"fade_in_duration\", None),"
      },
      {
        "filepath": "spellvid/cli/parser.py",
        "line_number": 349,
        "context": "        \"fade_out_duration\": getattr(args, \"fade_out_duration\", None),\n        \"fade_in_duration\": getattr(args, \"fade_in_duration\", None),\n        \"no_audio_fadein\": getattr(args, \"no_audio_fadein\", False),"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 17,
        "context": "Examples:\n    >>> apply_fadeout(clip_duration=5.0, fadeout_duration=1.0)\n    {'start_time': 4.0, 'duration': 1.0, 'clip_duration': 5.0}"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 18,
        "context": "    >>> apply_fadeout(clip_duration=5.0, fadeout_duration=1.0)\n    {'start_time': 4.0, 'duration': 1.0, 'clip_duration': 5.0}\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 20,
        "context": "\n    >>> apply_fadein(fadein_duration=0.5)\n    {'start_time': 0.0, 'duration': 0.5}"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 21,
        "context": "    >>> apply_fadein(fadein_duration=0.5)\n    {'start_time': 0.0, 'duration': 0.5}\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 23,
        "context": "\n    >>> plan_transition(clip1_duration=5.0, clip2_duration=3.0, transition_duration=0.5)\n    {'clip1_fadeout_start': 4.5, 'clip2_start_time': 4.5, 'total_duration': 7.5}"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 24,
        "context": "    >>> plan_transition(clip1_duration=5.0, clip2_duration=3.0, transition_duration=0.5)\n    {'clip1_fadeout_start': 4.5, 'clip2_start_time': 4.5, 'total_duration': 7.5}\n\"\"\""
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 33,
        "context": "\ndef apply_fadeout(clip_duration: float, fadeout_duration: float) -> Optional[Dict[str, Any]]:\n    \"\"\"計算淡出效果參數"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 37,
        "context": "    Args:\n        clip_duration: 視頻總長度(秒)\n        fadeout_duration: 淡出持續時間(秒)"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 38,
        "context": "        clip_duration: 視頻總長度(秒)\n        fadeout_duration: 淡出持續時間(秒)\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 43,
        "context": "        - start_time: 淡出開始時間(秒)\n        - duration: 淡出持續時間(秒)\n        - clip_duration: 視頻總長度(秒)"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 44,
        "context": "        - duration: 淡出持續時間(秒)\n        - clip_duration: 視頻總長度(秒)\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 46,
        "context": "\n        若 fadeout_duration 為 0,回傳 None\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 49,
        "context": "    Raises:\n        ValueError: 當 fadeout_duration >= clip_duration 時\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 52,
        "context": "    Examples:\n        >>> apply_fadeout(clip_duration=5.0, fadeout_duration=1.0)\n        {'start_time': 4.0, 'duration': 1.0, 'clip_duration': 5.0}"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 53,
        "context": "        >>> apply_fadeout(clip_duration=5.0, fadeout_duration=1.0)\n        {'start_time': 4.0, 'duration': 1.0, 'clip_duration': 5.0}\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 55,
        "context": "\n        >>> apply_fadeout(clip_duration=1.5, fadeout_duration=0.5)\n        {'start_time': 1.0, 'duration': 0.5, 'clip_duration': 1.5}"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 56,
        "context": "        >>> apply_fadeout(clip_duration=1.5, fadeout_duration=0.5)\n        {'start_time': 1.0, 'duration': 0.5, 'clip_duration': 1.5}\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 58,
        "context": "\n        >>> apply_fadeout(clip_duration=5.0, fadeout_duration=0.0)\n        None"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 62,
        "context": "    # 零持續時間 = 不應用效果\n    if fadeout_duration == 0.0:\n        return None"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 66,
        "context": "    # 驗證參數\n    validate_effect_duration(fadeout_duration, clip_duration)\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 68,
        "context": "\n    # 計算淡出起始時間: 視頻結束前 fadeout_duration 秒\n    start_time = clip_duration - fadeout_duration"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 69,
        "context": "    # 計算淡出起始時間: 視頻結束前 fadeout_duration 秒\n    start_time = clip_duration - fadeout_duration\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 73,
        "context": "        \"start_time\": start_time,\n        \"duration\": fadeout_duration,\n        \"clip_duration\": clip_duration,"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 74,
        "context": "        \"duration\": fadeout_duration,\n        \"clip_duration\": clip_duration,\n    }"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 78,
        "context": "\ndef apply_fadein(fadein_duration: float) -> Optional[Dict[str, Any]]:\n    \"\"\"計算淡入效果參數"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 82,
        "context": "    Args:\n        fadein_duration: 淡入持續時間(秒)\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 87,
        "context": "        - start_time: 淡入開始時間(固定為 0.0)\n        - duration: 淡入持續時間(秒)\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 89,
        "context": "\n        若 fadein_duration 為 0,回傳 None\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 92,
        "context": "    Examples:\n        >>> apply_fadein(fadein_duration=0.5)\n        {'start_time': 0.0, 'duration': 0.5}"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 93,
        "context": "        >>> apply_fadein(fadein_duration=0.5)\n        {'start_time': 0.0, 'duration': 0.5}\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 95,
        "context": "\n        >>> apply_fadein(fadein_duration=0.0)\n        None"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 99,
        "context": "    # 零持續時間 = 不應用效果\n    if fadein_duration == 0.0:\n        return None"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 105,
        "context": "        \"start_time\": 0.0,\n        \"duration\": fadein_duration,\n    }"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 110,
        "context": "def plan_transition(\n    clip1_duration: float,\n    clip2_duration: float,"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 111,
        "context": "    clip1_duration: float,\n    clip2_duration: float,\n    transition_duration: float"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 112,
        "context": "    clip2_duration: float,\n    transition_duration: float\n) -> Dict[str, Any]:"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 117,
        "context": "    Args:\n        clip1_duration: 第一個 clip 的長度(秒)\n        clip2_duration: 第二個 clip 的長度(秒)"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 118,
        "context": "        clip1_duration: 第一個 clip 的長度(秒)\n        clip2_duration: 第二個 clip 的長度(秒)\n        transition_duration: 過渡重疊時間(秒)"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 119,
        "context": "        clip2_duration: 第二個 clip 的長度(秒)\n        transition_duration: 過渡重疊時間(秒)\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 125,
        "context": "        - clip2_start_time: clip2 開始播放的時間(秒)\n        - total_duration: 兩個 clip 合併後的總長度(秒)\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 128,
        "context": "    Raises:\n        ValueError: 當 transition_duration > clip1_duration 或 clip2_duration 時\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 131,
        "context": "    Examples:\n        >>> plan_transition(clip1_duration=5.0, clip2_duration=3.0, transition_duration=0.5)\n        {'clip1_fadeout_start': 4.5, 'clip2_start_time': 4.5, 'total_duration': 7.5}"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 132,
        "context": "        >>> plan_transition(clip1_duration=5.0, clip2_duration=3.0, transition_duration=0.5)\n        {'clip1_fadeout_start': 4.5, 'clip2_start_time': 4.5, 'total_duration': 7.5}\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 134,
        "context": "\n        >>> plan_transition(clip1_duration=5.0, clip2_duration=3.0, transition_duration=0.0)\n        {'clip1_fadeout_start': 5.0, 'clip2_start_time': 5.0, 'total_duration': 8.0}"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 135,
        "context": "        >>> plan_transition(clip1_duration=5.0, clip2_duration=3.0, transition_duration=0.0)\n        {'clip1_fadeout_start': 5.0, 'clip2_start_time': 5.0, 'total_duration': 8.0}\n    \"\"\""
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 138,
        "context": "    # 驗證過渡時間不超過任一 clip 長度\n    if transition_duration > clip1_duration:\n        raise ValueError("
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 140,
        "context": "        raise ValueError(\n            f\"過渡持續時間 {transition_duration:.2f} 秒超過第一個 clip 長度 {clip1_duration:.2f} 秒\"\n        )"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 142,
        "context": "        )\n    if transition_duration > clip2_duration:\n        raise ValueError("
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 144,
        "context": "        raise ValueError(\n            f\"過渡持續時間 {transition_duration:.2f} 秒超過第二個 clip 長度 {clip2_duration:.2f} 秒\"\n        )"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 147,
        "context": "\n    # clip1 淡出起始時間 = clip1_duration - transition_duration\n    clip1_fadeout_start = clip1_duration - transition_duration"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 148,
        "context": "    # clip1 淡出起始時間 = clip1_duration - transition_duration\n    clip1_fadeout_start = clip1_duration - transition_duration\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 154,
        "context": "    # 總長度 = clip1 + clip2 - 重疊部分\n    total_duration = clip1_duration + clip2_duration - transition_duration\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 159,
        "context": "        \"clip2_start_time\": clip2_start_time,\n        \"total_duration\": total_duration,\n    }"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 163,
        "context": "\ndef validate_effect_duration(duration: float, clip_duration: Optional[float] = None) -> None:\n    \"\"\"驗證效果持續時間的有效性"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 167,
        "context": "    Args:\n        duration: 效果持續時間(秒)\n        clip_duration: 視頻總長度(秒),可選"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 168,
        "context": "        duration: 效果持續時間(秒)\n        clip_duration: 視頻總長度(秒),可選\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 174,
        "context": "    Examples:\n        >>> validate_effect_duration(1.0)\n        # 無異常"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 177,
        "context": "\n        >>> validate_effect_duration(-1.0)\n        Traceback (most recent call last):"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 181,
        "context": "\n        >>> validate_effect_duration(10.0, clip_duration=5.0)\n        Traceback (most recent call last):"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 185,
        "context": "    \"\"\"\n    if duration < 0:\n        raise ValueError(f\"持續時間 {duration:.2f} 秒不能為負數\")"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 186,
        "context": "    if duration < 0:\n        raise ValueError(f\"持續時間 {duration:.2f} 秒不能為負數\")\n"
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 188,
        "context": "\n    if clip_duration is not None and duration >= clip_duration:\n        raise ValueError("
      },
      {
        "filepath": "spellvid/domain/effects.py",
        "line_number": 190,
        "context": "        raise ValueError(\n            f\"持續時間 {duration:.2f} 秒超過最大值 {clip_duration:.2f} 秒\"\n        )"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 22,
        "context": "\n    >>> calculate_timer_updates(video_duration=10.0, update_interval=1.0)\n    [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 77,
        "context": "def calculate_timeline(\n    video_duration: float,\n    fadeout_duration: float = 0.0,"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 78,
        "context": "    video_duration: float,\n    fadeout_duration: float = 0.0,\n    reveal_time: Optional[float] = None,"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 85,
        "context": "    Args:\n        video_duration: 視頻總長度(秒)\n        fadeout_duration: 淡出持續時間(秒),預設 0"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 86,
        "context": "        video_duration: 視頻總長度(秒)\n        fadeout_duration: 淡出持續時間(秒),預設 0\n        reveal_time: 字母揭示時間點(秒),可選"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 92,
        "context": "        時間軸資料字典,包含:\n        - total_duration: 總長度\n        - video_start: 視頻開始時間"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 101,
        "context": "    Examples:\n        >>> timeline = calculate_timeline(video_duration=10.0)\n        >>> timeline['total_duration']"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 102,
        "context": "        >>> timeline = calculate_timeline(video_duration=10.0)\n        >>> timeline['total_duration']\n        10.0"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 106,
        "context": "        >>> timeline = calculate_timeline(\n        ...     video_duration=10.0,\n        ...     fadeout_duration=2.0,"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 107,
        "context": "        ...     video_duration=10.0,\n        ...     fadeout_duration=2.0,\n        ...     reveal_time=3.0"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 114,
        "context": "    # 驗證參數\n    if video_duration <= 0:\n        raise ValueError(f\"視頻長度 {video_duration:.2f} 秒必須大於零\")"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 115,
        "context": "    if video_duration <= 0:\n        raise ValueError(f\"視頻長度 {video_duration:.2f} 秒必須大於零\")\n"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 117,
        "context": "\n    if reveal_time is not None and reveal_time > video_duration:\n        raise ValueError("
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 119,
        "context": "        raise ValueError(\n            f\"揭示時間 {reveal_time:.2f} 秒超出視頻長度 {video_duration:.2f} 秒\"\n        )"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 133,
        "context": "    # 淡出事件\n    if fadeout_duration > 0:\n        fadeout_start = video_duration - fadeout_duration"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 134,
        "context": "    if fadeout_duration > 0:\n        fadeout_start = video_duration - fadeout_duration\n        events.append({"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 138,
        "context": "            \"time\": fadeout_start,\n            \"duration\": fadeout_duration,\n        })"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 144,
        "context": "        timer_updates = calculate_timer_updates(\n            video_duration, timer_update_interval\n        )"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 150,
        "context": "    # 視頻結束事件\n    events.append({\"type\": \"video_end\", \"time\": video_duration})\n"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 156,
        "context": "    return {\n        \"total_duration\": video_duration,\n        \"video_start\": 0.0,"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 158,
        "context": "        \"video_start\": 0.0,\n        \"video_end\": video_duration,\n        \"events\": events,"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 164,
        "context": "def calculate_timer_updates(\n    video_duration: float,\n    update_interval: float"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 170,
        "context": "    Args:\n        video_duration: 視頻總長度(秒)\n        update_interval: 更新間隔(秒)"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 177,
        "context": "    Examples:\n        >>> calculate_timer_updates(video_duration=10.0, update_interval=1.0)\n        [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 180,
        "context": "\n        >>> calculate_timer_updates(video_duration=5.0, update_interval=0.5)\n        [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5]"
      },
      {
        "filepath": "spellvid/domain/timing.py",
        "line_number": 186,
        "context": "\n    while current_time < video_duration:\n        updates.append(current_time)"
      },
      {
        "filepath": "spellvid/infrastructure/media/ffmpeg_wrapper.py",
        "line_number": 32,
        "context": "\n    def probe_duration(self, media_path: str) -> float:\n        \"\"\"查詢媒體檔案時長"
      },
      {
        "filepath": "spellvid/infrastructure/media/ffmpeg_wrapper.py",
        "line_number": 49,
        "context": "            >>> wrapper = FFmpegWrapper()\n            >>> duration = wrapper.probe_duration(\"/path/to/music.mp3\")\n            >>> duration"
      },
      {
        "filepath": "spellvid/infrastructure/media/ffmpeg_wrapper.py",
        "line_number": 50,
        "context": "            >>> duration = wrapper.probe_duration(\"/path/to/music.mp3\")\n            >>> duration\n            183.52"
      },
      {
        "filepath": "spellvid/infrastructure/media/ffmpeg_wrapper.py",
        "line_number": 63,
        "context": "            \"-v\", \"error\",\n            \"-show_entries\", \"format=duration\",\n            \"-of\", \"default=noprint_wrappers=1:nokey=1\","
      },
      {
        "filepath": "spellvid/infrastructure/media/ffmpeg_wrapper.py",
        "line_number": 74,
        "context": "            )\n            duration = float(output.strip())\n"
      },
      {
        "filepath": "spellvid/infrastructure/media/ffmpeg_wrapper.py",
        "line_number": 76,
        "context": "\n            if duration < 0:\n                raise RuntimeError("
      },
      {
        "filepath": "spellvid/infrastructure/media/ffmpeg_wrapper.py",
        "line_number": 78,
        "context": "                raise RuntimeError(\n                    f\"Invalid duration: {duration} for {media_path}\"\n                )"
      },
      {
        "filepath": "spellvid/infrastructure/media/ffmpeg_wrapper.py",
        "line_number": 81,
        "context": "\n            return duration\n        except subprocess.CalledProcessError as e:"
      },
      {
        "filepath": "spellvid/infrastructure/media/ffmpeg_wrapper.py",
        "line_number": 88,
        "context": "            raise RuntimeError(\n                f\"Cannot parse duration from {media_path}: {e}\"\n            )"
      },
      {
        "filepath": "spellvid/infrastructure/media/interface.py",
        "line_number": 8,
        "context": "- 不涉及複雜的編碼邏輯(由 IVideoComposer 處理)\n- 專注於元資料查詢(duration, dimensions)和簡單轉換(extract_audio)\n\"\"\""
      },
      {
        "filepath": "spellvid/infrastructure/media/interface.py",
        "line_number": 30,
        "context": "\n    def probe_duration(\n        self,"
      },
      {
        "filepath": "spellvid/infrastructure/media/interface.py",
        "line_number": 49,
        "context": "        Example:\n            >>> duration = processor.probe_duration(\"/path/to/music.mp3\")\n            >>> duration"
      },
      {
        "filepath": "spellvid/infrastructure/media/interface.py",
        "line_number": 50,
        "context": "            >>> duration = processor.probe_duration(\"/path/to/music.mp3\")\n            >>> duration\n            183.52  # 3 分 3.52 秒"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 28,
        "context": "        回傳值標記為 Any,因為不同框架的 Clip 型別不同。\n        實作者應確保回傳的物件具有 duration, size 等基本屬性。\n    \"\"\""
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 35,
        "context": "        color: Tuple[int, int, int],\n        duration: float\n    ) -> Any:"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 44,
        "context": "            color: (R, G, B) 顏色值,範圍 0-255\n            duration: 持續時間,單位秒\n"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 47,
        "context": "        Returns:\n            框架特定的 Clip 物件,具有 duration 和 size 屬性\n"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 51,
        "context": "            >>> clip = composer.create_color_clip((1920, 1080), (255, 250, 233), 5.0)\n            >>> clip.duration\n            5.0"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 59,
        "context": "        image_array: np.ndarray,\n        duration: float,\n        position: Tuple[int, int] = (0, 0)"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 68,
        "context": "            image_array: NumPy 陣列,形狀 (H, W, C),dtype uint8\n            duration: Clip 持續時間,單位秒\n            position: (x, y) 在畫布上的左上角位置"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 83,
        "context": "        video_path: str,\n        duration: float,\n        position: Tuple[int, int] = (0, 0)"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 92,
        "context": "            video_path: 視頻檔案絕對路徑\n            duration: 目標持續時間(若原視頻較長會裁切,較短則重複/凍結)\n            position: (x, y) 在畫布上的位置"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 133,
        "context": "        clip: Any,\n        duration: float\n    ) -> Any:"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 138,
        "context": "        在 Clip 結尾處套用淡出至黑屏的效果。\n        注意:不改變 Clip 的總時長,只改變最後 duration 秒的不透明度。\n"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 142,
        "context": "            clip: 要處理的 Clip\n            duration: 淡出持續時間,單位秒(從結尾往前算)\n"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 150,
        "context": "            >>> faded = composer.apply_fadeout(clip, 3.0)  # 最後 3 秒淡出\n            >>> faded.duration\n            10.0  # 總時長不變"
      },
      {
        "filepath": "spellvid/infrastructure/video/interface.py",
        "line_number": 205,
        "context": "            >>> concat = composer.concatenate_clips([clip1, clip2])\n            >>> concat.duration\n            5.0"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 65,
        "context": "        color: Tuple[int, int, int],\n        duration: float\n    ) -> Any:"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 72,
        "context": "            color: (R, G, B) 顏色值\n            duration: 持續時間(秒)\n"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 79,
        "context": "            >>> clip = adapter.create_color_clip((1920, 1080), (255, 250, 233), 5.0)\n            >>> clip.duration\n            5.0"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 82,
        "context": "        \"\"\"\n        return ColorClip(size=size, color=color, duration=duration)\n"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 87,
        "context": "        image_array: np.ndarray,\n        duration: float,\n        position: Tuple[int, int] = (0, 0)"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 94,
        "context": "            image_array: NumPy 陣列 (H, W, C)\n            duration: Clip 持續時間\n            position: (x, y) 位置"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 104,
        "context": "        \"\"\"\n        clip = ImageClip(image_array, duration=duration)\n        clip = clip.with_position(position)"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 111,
        "context": "        video_path: str,\n        duration: float,\n        position: Tuple[int, int] = (0, 0)"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 118,
        "context": "            video_path: 視頻檔案路徑\n            duration: 目標持續時間\n            position: (x, y) 位置"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 133,
        "context": "        # 裁切或循環至目標時長\n        if clip.duration > duration:\n            clip = clip.subclip(0, duration)"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 134,
        "context": "        if clip.duration > duration:\n            clip = clip.subclip(0, duration)\n        elif clip.duration < duration:"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 135,
        "context": "            clip = clip.subclip(0, duration)\n        elif clip.duration < duration:\n            # 循環播放至目標時長"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 137,
        "context": "            # 循環播放至目標時長\n            num_loops = int(np.ceil(duration / clip.duration))\n            clip = concatenate_videoclips([clip] * num_loops)"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 139,
        "context": "            clip = concatenate_videoclips([clip] * num_loops)\n            clip = clip.subclip(0, duration)\n"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 168,
        "context": "        clip: Any,\n        duration: float\n    ) -> Any:"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 174,
        "context": "            clip: 要處理的 Clip\n            duration: 淡出持續時間(秒)\n"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 182,
        "context": "            >>> faded = adapter.apply_fadeout(clip, 3.0)\n            >>> faded.duration\n            10.0"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 185,
        "context": "        \"\"\"\n        return clip.with_effects([vfx.FadeOut(duration)])\n"
      },
      {
        "filepath": "spellvid/infrastructure/video/moviepy_adapter.py",
        "line_number": 241,
        "context": "            >>> combined = adapter.concatenate_clips([clip1, clip2], method=\"chain\")\n            >>> combined.duration\n            6.0"
      }
    ],
    "call_count": 827,
    "analysis_confidence": 1.0,
    "notes": ""
  },
  {
    "function_name": "make_frame",
    "category": "production",
    "references": [
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3220,
        "context": "\n        def make_frame(t):\n            # t may be array-like; compute sine and return mono samples"
      },
      {
        "filepath": "spellvid/utils.py",
        "line_number": 3231,
        "context": "\n        ac = _mpy.AudioClip(make_frame, duration=length, fps=44100)\n        return ac.with_start(start_sec)"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3220,
        "context": "\n        def make_frame(t):\n            # t may be array-like; compute sine and return mono samples"
      },
      {
        "filepath": "spellvid/utils_old_full.py",
        "line_number": 3231,
        "context": "\n        ac = _mpy.AudioClip(make_frame, duration=length, fps=44100)\n        return ac.with_start(start_sec)"
      }
    ],
    "call_count": 4,
    "analysis_confidence": 0.8,
    "notes": ""
  }
]